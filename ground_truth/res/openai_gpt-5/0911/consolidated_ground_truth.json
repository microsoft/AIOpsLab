[
  {
    "problem_id": "astronomy_shop_cart_service_failure-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/product-catalog --tail=200\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Auxiliary check of product-catalog service logs to rule out catalog issues.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/product-catalog --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/fraud<REPLICA_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Check current fraud-detection logs for errors; used as a supplemental probe.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/fraud-detection --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 55
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/fraud<REPLICA_SUF<REPLICA_SUFFIX>evious --tail=200\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Attempt to view previous logs for fraud-detection to check recent restarts.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/fraud-detection --previous --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 55
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 67
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/ad --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Auxiliary inspection of ad service logs which showed OTLP exporter timeouts.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/ad --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/recommendation --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Auxiliary verification that recommendation service is receiving requests.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/recommendation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/payment --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Inspect payment service logs to confirm request handling and success responses.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/payment --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/checkout --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Inspect checkout service logs as auxiliary verification.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/checkout --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/frontend --tail=200\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Check frontend logs to verify the web app starts and is ready.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/frontend --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n astronomy-shop <POD_SUFFIX>-54<POD_SUFFIX>",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Describe the frontend-proxy pod to validate configuration and readiness details.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl describe pod -n astronomy-shop frontend-proxy-548b4649d7-4ntn6\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "frontend-proxy",
            "placeholder": "<POD_SUFFIX>",
            "position": 51
          },
          {
            "type": "k8s_pod_suffix",
            "original": "548b4649d7-4ntn6",
            "placeholder": "<POD_SUFFIX>",
            "position": 66
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n astronomy-shop load-generator-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Describe the load-generator pod to confirm environment variables and target host/ports.",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl describe pod -n astronomy-shop load-generator-68b6f899f5-bz544\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "68b6f899f5-bz544",
            "placeholder": "<POD_SUFFIX>",
            "position": 66
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Verify service endpoints (including valkey-cart:6379) are populated, indicating service discovery is functioning.",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl get endpoints -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Review frontend-proxy (Envoy) logs to confirm proxy startup and readiness, narrowing connectivity issues.",
        "sequence_number": 12,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/frontend-proxy --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "frontend-proxy",
            "placeholder": "<POD_SUFFIX>",
            "position": 50
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/valkey-cart --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Check valkey-cart (Redis) logs to confirm it is healthy and accepting connections, narrowing the issue to connectivity/config.",
        "sequence_number": 13,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/valkey-cart --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/cart -c cart --tail=200\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Fetch cart container logs showing the core failure: inability to connect to Redis (valkey) leading to FailedPrecondition errors.",
        "sequence_number": 14,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/cart -c cart --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop pod/load-generator-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect specific load-generator pod logs which revealed repeated connection refused errors.",
        "sequence_number": 15,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop pod/load-generator-68b6f899f5-bz544 --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "68b6f899f5-bz544",
            "placeholder": "<POD_SUFFIX>",
            "position": 62
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/load<REPLICA_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Check load-generator deployment logs for workload and client-side errors.",
        "sequence_number": 16,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/load-generator --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-generator",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 54
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/cart --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Fetch recent cart deployment logs (default container) to see immediate errors and note container selection hints.",
        "sequence_number": 17,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/cart --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "List services to verify the presence and ports of backing services such as valkey-cart for the cart service.",
        "sequence_number": 18,
        "original_command": "exec_shell(\"kubectl get svc -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List all pods in the astronomy-shop namespace to check overall component health and identify candidates for investigation.",
        "sequence_number": 19,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      }
    ]
  },
  {
    "problem_id": "revoke_auth_mongodb-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation mongodb-geo-<POD_SUFFIX> -- cat /docker-entrypoint-initdb.d/k8s-geo-mongo.sh\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Reads the MongoDB init script to confirm intended user creation and readWrite grants for admin/root on geo-db.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation mongodb-geo-5ff578bcb8-8zqhb -- cat /docker-entrypoint-initdb.d/k8s-geo-mongo.sh\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-8zqhb",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Provides pod IPs and node placement to correlate MongoDB connection source IPs with the geo pod.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation geo -o yaml\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Fetches the geo deployment spec to verify command, image, and environment configuration that might affect DB access.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation geo -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation mongodb-geo-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Checks MongoDB logs to correlate authentication success for 'admin' with subsequent authorization failures on geo-db.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation mongodb-geo-5ff578bcb8-8zqhb\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-8zqhb",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n test-hotel-reservation geo-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Describes the geo pod to confirm CrashLoopBackOff state and container restart behavior.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl describe pod -n test-hotel-reservation geo-84fbc958c7-vp87m\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-vp87m",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Retrieves application logs from the geo service pod, revealing the authorization error against geo-db.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-84fbc958c7-vp87m\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-vp87m",
            "placeholder": "<POD_SUFFIX>",
            "position": 55
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Lists all pods in the namespace to identify failing components and overall system status.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      }
    ]
  },
  {
    "problem_id": "misconfig_app_hotel_res-mitigation-1",
    "key_commands": [
      {
        "command": "submit()",
        "type": "execute_command",
        "importance_score": 3,
        "description": "Submit mitigation completion for evaluation",
        "sequence_number": 1,
        "original_command": "submit()"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-<POD_SUFFIX> -c hotel-reserv-geo --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Confirm geo service successfully connects to DB and starts up",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-c47ff745-nd9q2 -c hotel-reserv-geo --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "c47ff745-nd9q2",
            "placeholder": "<POD_SUFFIX>",
            "position": 55
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/mongodb-geo --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Verify MongoDB deployment health and readiness after service change",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/mongodb-geo --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc mongodb-geo -n test-hotel-reservation -o yaml\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Confirm mongodb-geo service now exposes both 27017 and 27777 ports",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl get svc mongodb-geo -n test-hotel-reservation -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl patch svc mongodb-geo -n test-hotel-reservation --type=\\'merge\\' -p \\'{\\\\\"spec\\\\\":{\\\\\"ports\\\\\":[{\\\\\"name\\\\\":\\\\\"mongo\\\\\",\\\\\"port\\\\\":27017,\\\\\"targetPort\\\\\":27017,\\\\\"protocol\\\\\":\\\\\"TCP\\\\\"},{\\\\\"name\\\\\":\\\\\"mongo-compat\\\\\",\\\\\"port\\\\\":27777,\\\\\"targetPort\\\\\":27017,\\\\\"protocol\\\\\":\\\\\"TCP\\\\\"}]}}\\'\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Patch MongoDB service to expose compatibility port 27777 mapped to targetPort 27017, enabling geo to connect",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl patch svc mongodb-geo -n test-hotel-reservation --type=\\'merge\\' -p \\'{\\\\\"spec\\\\\":{\\\\\"ports\\\\\":[{\\\\\"name\\\\\":\\\\\"mongo\\\\\",\\\\\"port\\\\\":27017,\\\\\"targetPort\\\\\":27017,\\\\\"protocol\\\\\":\\\\\"TCP\\\\\"},{\\\\\"name\\\\\":\\\\\"mongo-compat\\\\\",\\\\\"port\\\\\":27777,\\\\\"targetPort\\\\\":27017,\\\\\"protocol\\\\\":\\\\\"TCP\\\\\"}]}}\\'\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-<POD_SUFFIX> -c hotel-reserv-geo --tail=100\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Check current geo service logs post-patch to assess connection attempts",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-c47ff745-nd9q2 -c hotel-reserv-geo --tail=100\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "c47ff745-nd9q2",
            "placeholder": "<POD_SUFFIX>",
            "position": 55
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Verify pod statuses after applying the service patch",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get configmaps -n test-hotel-reservation -o yaml\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Review ConfigMaps related to Mongo initialization and roles",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl get configmaps -n test-hotel-reservation -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl patch svc mongodb-geo -n test-hotel-reservation --type='merge' -p '{\\\"spec\\\":{\\\"ports\\\":[{\\\"name\\\":\\\"mongo\\\",\\\"port\\\":27017,\\\"targetPort\\\":27017,\\\"protocol\\\":\\\"TCP\\\"},{\\\"name\\\":\\\"mongo-compat\\\",\\\"port\\\":27777,\\\"targetPort\\\":27017,\\\"protocol\\\":\\\"TCP\\\"}]}}'\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Patch mongodb-geo service to add compatibility port 27777 mapped to targetPort 27017 (core fix)",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl patch svc mongodb-geo -n test-hotel-reservation --type='merge' -p '{\\\"spec\\\":{\\\"ports\\\":[{\\\"name\\\":\\\"mongo\\\",\\\"port\\\":27017,\\\"targetPort\\\":27017,\\\"protocol\\\":\\\"TCP\\\"},{\\\"name\\\":\\\"mongo-compat\\\",\\\"port\\\":27777,\\\"targetPort\\\":27017,\\\"protocol\\\":\\\"TCP\\\"}]}}'\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation -o yaml\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Enumerate all deployments for broader context",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy geo -n test-hotel-reservation -o yaml\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Inspect geo deployment configuration and image details for additional context",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl get deploy geo -n test-hotel-reservation -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "List services and ports to confirm mongodb-geo exposes only 27017 (port mismatch root cause)",
        "sequence_number": 12,
        "original_command": "exec_shell(\"kubectl get svc -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-<POD_SUFFIX> -c hotel-reserv-geo -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Fetch previous container logs to identify crash reason (DB URL mongodb-geo:27777, connection failure)",
        "sequence_number": 13,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-c47ff745-nd9q2 -c hotel-reserv-geo --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "c47ff745-nd9q2",
            "placeholder": "<POD_SUFFIX>",
            "position": 55
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 89
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod geo-<POD_SUFFIX> -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Describe the failing geo pod to inspect container state and recent events",
        "sequence_number": 14,
        "original_command": "exec_shell(\"kubectl describe pod geo-c47ff745-nd9q2 -n test-hotel-reservation\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "c47ff745-nd9q2",
            "placeholder": "<POD_SUFFIX>",
            "position": 37
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the namespace to detect failing components",
        "sequence_number": 15,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      }
    ]
  },
  {
    "problem_id": "wrong_bin_usage-analysis-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List all pods in the namespace to assess overall service status and obtain pod names for further inspection.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation recommendation-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Retrieve logs from the recommendation service to verify its health and behavior.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation recommendation-6879fb56bf-zqn84 --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "6879fb56bf-zqn84",
            "placeholder": "<POD_SUFFIX>",
            "position": 66
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation frontend-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Inspect frontend logs to identify user-facing errors, revealing repeated GetProfiles failures that point toward the profile service.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation frontend-7fc7ddc9db-4k9gm --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7fc7ddc9db-4k9gm",
            "placeholder": "<POD_SUFFIX>",
            "position": 60
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation consul-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Check Consul agent logs to ensure service registry and discovery are functioning correctly.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation consul-78c8d79bb-blklg --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "78c8d79bb-blklg",
            "placeholder": "<POD_SUFFIX>",
            "position": 58
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation search-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Review search service logs to compare behavior and confirm normal registration in Consul.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation search-5c64c8f5bc-2rqp4 --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5c64c8f5bc-2rqp4",
            "placeholder": "<POD_SUFFIX>",
            "position": 58
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation profile-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Examine profile service logs; they show it is running geo code (cmd/geo), strongly indicating a wrong binary/start command.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation profile-5fc7b778f5-jdghj --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5fc7b778f5-jdghj",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "List pods with node/IP details for context; auxiliary verification.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy profile -n test-hotel-reservation -o yaml\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Fetch the profile deployment spec; confirms misconfiguration with container command set to [\"geo\"].",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl get deploy profile -n test-hotel-reservation -o yaml\")"
      },
      {
        "command": "submit({\"system_level\": \"Application\", \"fault_type\": \"Misconfiguration\"})",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the analysis result identifying an application-level misconfiguration (wrong binary/command).",
        "sequence_number": 9,
        "original_command": "submit({\"system_level\": \"Application\", \"fault_type\": \"Misconfiguration\"})"
      }
    ]
  },
  {
    "problem_id": "revoke_auth_mongodb-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the namespace to identify failing components (geo pod in Error state).",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod geo-<POD_SUFFIX> -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Describe the failing geo pod to inspect container state, restarts, and events indicating crash/backoff.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod geo-84fbc958c7-74sj5 -n test-hotel-reservation\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-74sj5",
            "placeholder": "<POD_SUFFIX>",
            "position": 37
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs geo-<POD_SUFFIX> -n test-hotel-reservation -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Retrieve previous logs from the geo container to surface the authorization error against MongoDB.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs geo-84fbc958c7-74sj5 -n test-hotel-reservation --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-74sj5",
            "placeholder": "<POD_SUFFIX>",
            "position": 29
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 69
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs mongodb-geo-<POD_SUFFIX> -n test-hotel-reservation --tail=200\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Check MongoDB pod logs to corroborate authentication/authorization failures and DB initialization details.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs mongodb-geo-5ff578bcb8-nwfmf -n test-hotel-reservation --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-nwfmf",
            "placeholder": "<POD_SUFFIX>",
            "position": 37
          }
        ]
      },
      {
        "command": "submit(\"Yes\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the detection result indicating anomalies are present.",
        "sequence_number": 5,
        "original_command": "submit(\"Yes\")"
      }
    ]
  },
  {
    "problem_id": "misconfig_app_hotel_res-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Lists all pods in the namespace to identify failing components (geo pod in Error state).",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-<POD_SUFFIX> --all-containers=true --previous=false\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Retrieves logs from the failing geo pod to reveal the DB connection error and port mismatch (mongodb-geo:27777).",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-c47ff745-qn9vc --all-containers=true --previous=false\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "c47ff745-qn9vc",
            "placeholder": "<POD_SUFFIX>",
            "position": 55
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get deploy geo -n test-hotel-reservation -o yaml && kubectl get svc mongodb-geo -n test-hotel-reservation -o yaml && kubectl logs -n test-hotel-reservation mongodb-geo-<POD_SUFFIX> --all-containers=true --tail=100\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspects geo deployment and mongodb-geo service configuration and checks MongoDB pod logs to confirm service port (27017) and validate the root cause (geo misconfiguration).",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get deploy geo -n test-hotel-reservation -o yaml && kubectl get svc mongodb-geo -n test-hotel-reservation -o yaml && kubectl logs -n test-hotel-reservation mongodb-geo-5ff578bcb8-xv9q6 --all-containers=true --tail=100\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-xv9q6",
            "placeholder": "<POD_SUFFIX>",
            "position": 188
          }
        ]
      },
      {
        "command": "submit([\"geo\"])",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submits the identified faulty component (geo) as the root cause.",
        "sequence_number": 4,
        "original_command": "submit([\"geo\"])"
      }
    ]
  },
  {
    "problem_id": "redeploy_without_PV-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the namespace to check overall workload health and readiness.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List services and their cluster IPs/ports to verify service exposure and discovery details.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get svc -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl get events -n test-hotel-reservation --sort-by=.lastTimestamp\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Review recent namespace events chronologically for scheduling, provisioning, and warning signals.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get events -n test-hotel-reservation --sort-by=.lastTimestamp\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/frontend --tail=200\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Inspect frontend deployment logs; reveals connection refused errors to Consul indicating discovery/connectivity anomalies.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/frontend --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/consul --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Check Consul server logs to confirm service readiness and request handling during the timeframe of failures.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/consul --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/recommendation --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Verify recommendation service behavior and registration in Consul as auxiliary confirmation.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/recommendation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/search --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Verify search service behavior and successful Consul registration as auxiliary confirmation.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/search --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List service endpoints to ensure services are backed by correct pod IPs and ports.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl get endpoints -n test-hotel-reservation -o wide\")"
      }
    ]
  },
  {
    "problem_id": "redeploy_without_PV-mitigation-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation profile -o yaml\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Review profile deployment spec to ensure configuration (image, resources, env) aligns with expectations.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation profile -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Re-check pod IPs and node placement to validate steady-state after recovery.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List service endpoints to confirm pod IPs are correctly associated and routable.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get endpoints -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation reservation-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Verify reservation service logs to ensure it is up and functioning.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation reservation-78c9f7976b-r8d5g --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "78c9f7976b-r8d5g",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation rate-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Confirm rate service readiness and registration in the service mesh/consul.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation rate-7bdc978679-cw2rh --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7bdc978679-cw2rh",
            "placeholder": "<POD_SUFFIX>",
            "position": 56
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation recommendation-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Check recommendation service logs to ensure it initializes and registers correctly.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation recommendation-6879fb56bf-7fc7d --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "6879fb56bf-7fc7d",
            "placeholder": "<POD_SUFFIX>",
            "position": 66
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation search-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Verify search service is healthy and registered; supports end-to-end functionality checks.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation search-5c64c8f5bc-k8hmz --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5c64c8f5bc-k8hmz",
            "placeholder": "<POD_SUFFIX>",
            "position": 58
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation frontend-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Validate frontend service behavior and its ability to resolve/register dependent backend services.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation frontend-7fc7ddc9db-k76dl --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7fc7ddc9db-k76dl",
            "placeholder": "<POD_SUFFIX>",
            "position": 60
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation profile-<POD_SUFFIX> -<REPLICA_SUFFIX> hotel-reserv-profile --tail=200\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Fetch current profile service logs to confirm recovery and successful DB connectivity post-restart.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation profile-8b6dd7c6c-pblc2 --container hotel-reserv-profile --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "8b6dd7c6c-pblc2",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-container",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 73
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation mongodb-profile-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Check MongoDB (mongodb-profile) pod logs to confirm database startup/readiness and accepted connections.",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation mongodb-profile-758cb77f9f-fg296 --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "758cb77f9f-fg296",
            "placeholder": "<POD_SUFFIX>",
            "position": 67
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List services with cluster IPs/ports to verify backends (like mongodb-profile) are exposed correctly.",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl get svc -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation profile-<POD_SUFFIX> -<REPLICA_SUFFIX> hotel-reserv-pro<REPLICA_SUFFIX>evious\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Fetch previous container logs of the profile service to identify the error message ('no reachable servers').",
        "sequence_number": 12,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation profile-8b6dd7c6c-pblc2 --container hotel-reserv-profile --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "8b6dd7c6c-pblc2",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-container",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 73
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 106
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n test-hotel-reservation profile-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Inspect the profile pod details, including last state and events, to understand the restart cause.",
        "sequence_number": 13,
        "original_command": "exec_shell(\"kubectl describe pod -n test-hotel-reservation profile-8b6dd7c6c-pblc2\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "8b6dd7c6c-pblc2",
            "placeholder": "<POD_SUFFIX>",
            "position": 67
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the namespace to assess overall workload status and spot restarts or failures.",
        "sequence_number": 14,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      }
    ]
  },
  {
    "problem_id": "pod_failure_hotel_res-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List pods in the namespace to detect failing components.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod user-<POD_SUFFIX> -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect the failing user pod for detailed status and events to identify the root cause.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod user-66d5d6f874-wdvpm -n test-hotel-reservation\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "66d5d6f874-wdvpm",
            "placeholder": "<POD_SUFFIX>",
            "position": 38
          }
        ]
      },
      {
        "command": "submit([\"user\"])",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the identified faulty component to finalize the diagnosis.",
        "sequence_number": 3,
        "original_command": "submit([\"user\"])"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_payment_service_failure-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "List all pods in the astronomy-shop namespace to spot unhealthy statuses or unexpected restarts.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod fraud-detection-<POD_SUFFIX> -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect detailed state, events, and exit codes for the fraud-detection pod to understand failure/backoff causes.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod fraud-detection-65868bcdb5-64xjt -n astronomy-shop\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-64xjt",
            "placeholder": "<POD_SUFFIX>",
            "position": 49
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs fraud-detection-<POD_SUFFIX> -n astronomy-shop -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Fetch logs from the previously terminated container instance to analyze crash context.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs fraud-detection-65868bcdb5-64xjt -n astronomy-shop --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-64xjt",
            "placeholder": "<POD_SUFFIX>",
            "position": 41
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 73
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs fraud-detection-<POD_SUFFIX> -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Fetch current container logs for real-time error messages to aid diagnosis.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs fraud-detection-65868bcdb5-64xjt -n astronomy-shop\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-64xjt",
            "placeholder": "<POD_SUFFIX>",
            "position": 41
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop -o wide\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "List pods with extended details to confirm CrashLoopBackOff status and correlate with node/IP, solidifying anomaly detection.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop -o wide\")"
      }
    ]
  },
  {
    "problem_id": "k8s_target_port-misconfig-detection-2",
    "key_commands": [
      {
        "command": "submit(\"Yes\")",
        "type": "execute_command",
        "importance_score": 9,
        "description": "Submit that anomalies are detected (service targetPort misconfiguration)",
        "sequence_number": 1,
        "original_command": "submit(\"Yes\")"
      },
      {
        "command": "exec_shell(\"kubectl get cm -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "List ConfigMaps to verify presence of configurations referenced by pods (e.g., jaeger, text-service).",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get cm -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n test-social-network -o wide\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "List deployments to cross-check component readiness and context before drilling into misconfiguration",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get deploy -n test-social-network -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deploy/user-mongodb --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Check MongoDB logs to confirm database readiness and incoming connections.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deploy/user-mongodb --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deploy/text-service --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Verify text-service itself is running without errors, supporting diagnosis that failure stems from Service port mapping rather than application crash",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deploy/text-service --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc text-service -n test-social-network -o yaml\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Fetch full Service spec for text-service; confirms port: 9090 with targetPort: 9999, the root cause of the issue",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get svc text-service -n test-social-network -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deploy/user-service --tail=200\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Examine user-service logs; reveals MongoDB connection/index creation errors.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deploy/user-service --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl describe deploy/text-service -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Describe text-service deployment to verify container port is 9090/TCP, establishing mismatch with endpoint port",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl describe deploy/text-service -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deploy/nginx-thrift --tail=200\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Review API gateway (nginx-thrift) logs for front-door errors impacting requests.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deploy/nginx-thrift --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n test-social-network -o wide\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Inspect service endpoints to see actual target IP:port; reveals text-service endpoints using port 9999, a key indicator of targetPort misconfiguration",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl get endpoints -n test-social-network -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get events -n test-social-network --sort-by=.lastTimestamp\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect recent events to identify warnings/errors such as FailedMount and restarts.",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl get events -n test-social-network --sort-by=.lastTimestamp\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deploy/compose-post-service --tail=200\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Check upstream client logs; shows repeated connection refused to text-service:9090, indicating a possible service-to-pod port mismatch",
        "sequence_number": 12,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deploy/compose-post-service --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network -o wide\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all services and their exposed ports to identify the text-service configuration at a high level",
        "sequence_number": 13,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "List all pods in the namespace to verify components are running and identify targets for deeper inspection",
        "sequence_number": 14,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_ad_service_manual_gc-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the astronomy-shop namespace to assess overall pod health and restarts, including the ad service pod.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl get services -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List all services to identify ClusterIP addresses and confirm the presence of ad and related services.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get services -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deployment/frontend --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Review frontend logs to detect downstream connection errors, indicating inability to reach checkout and ad services.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deployment/frontend --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n astronomy-shop checkout ad -o wide\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Check service endpoints for checkout and ad to verify if backends are registered; reveals ad has no ready endpoints.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl get endpoints -n astronomy-shop checkout ad -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc ad -n astronomy-shop -o yaml\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Inspect the ad service configuration (selector, ports) to validate label-based endpoint selection.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl get svc ad -n astronomy-shop -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get pod -n astronomy-shop ad-<POD_SUFFIX> -o yaml\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Inspect the specific ad pod to confirm labels, IP, readiness, restarts, and correlate with service selectors.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get pod -n astronomy-shop ad-94bd576b5-jkqlc -o yaml\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-jkqlc",
            "placeholder": "<POD_SUFFIX>",
            "position": 49
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n astronomy-shop ad -o yaml\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Detailed endpoints view for ad service showing notReadyAddresses, confirming the pod is not considered ready for the service.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get endpoints -n astronomy-shop ad -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop ad-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Examine ad pod logs indicating the 'adManualGc' feature flag triggering manual GC, explaining readiness/availability issues.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop ad-94bd576b5-jkqlc --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-jkqlc",
            "placeholder": "<POD_SUFFIX>",
            "position": 46
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get deployment ad -n astronomy-shop -o yaml\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Check ad deployment status to corroborate unavailability (MinimumReplicasUnavailable) aligning with endpoint readiness problems.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl get deployment ad -n astronomy-shop -o yaml\")"
      }
    ]
  },
  {
    "problem_id": "network_loss_hotel_res-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/frontend --since=2m --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Re-check recent frontend logs to ensure issues are resolved or ongoing",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/frontend --since=2m --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/mongodb-rate --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Check MongoDB rate DB logs to confirm database readiness and rule out DB-originated issues.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/mongodb-rate --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation -o yaml\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Retrieve full deployments YAML for deeper configuration validation across components.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/memcached-profile --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Inspect memcached for profile service to validate cache readiness",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/memcached-profile --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl describe deployment -n test-hotel-reservation frontend\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Inspect frontend deployment configuration (image, command, ports, env) to rule out misconfiguration.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl describe deployment -n test-hotel-reservation frontend\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Check service endpoints to confirm backend pods are discoverable and exposed.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get endpoints -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/user --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Verify user service initializes and registers with Consul.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/user --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/reservation --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Verify reservation service initializes and registers with Consul.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/reservation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/rate --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Verify rate service initializes and registers with Consul.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/rate --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/geo --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Verify geo service initializes and registers with Consul.",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/geo --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/profile --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Verify profile service initializes and registers with Consul.",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/profile --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/recommendation --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Verify recommendation service initializes and registers with Consul.",
        "sequence_number": 12,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/recommendation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/search --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Verify that the search service initializes and registers with Consul, confirming Consul availability post-startup.",
        "sequence_number": 13,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/search --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/consul --tail=200\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Check Consul logs to confirm startup, leader election, and subsequent health queries from services.",
        "sequence_number": 14,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/consul --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/frontend --tail=200\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect frontend logs; reveals consul connection refused errors indicating initial network/service availability issue.",
        "sequence_number": 15,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/frontend --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List services and ports to confirm service exposure and cluster IPs.",
        "sequence_number": 16,
        "original_command": "exec_shell(\"kubectl get svc -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the target namespace to verify component readiness and restarts.",
        "sequence_number": 17,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      }
    ]
  },
  {
    "problem_id": "noop_detection_hotel_reservation-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl logs deploy/user -n test-hotel-reservation --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Confirm user service initialization and Consul registration as additional corroboration.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl logs deploy/user -n test-hotel-reservation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs deploy/rate -n test-hotel-reservation --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Verify rate service initialization and registration; helps establish that backend services stabilize.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs deploy/rate -n test-hotel-reservation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs deploy/reservation -n test-hotel-reservation --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Check reservation service operational status and Consul registration for broader system health.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs deploy/reservation -n test-hotel-reservation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs deploy/geo -n test-hotel-reservation --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Validate geo service readiness and Consul registration to contrast with frontend errors.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs deploy/geo -n test-hotel-reservation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs deploy/profile -n test-hotel-reservation --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Confirm profile service initializes and registers with Consul, corroborating service discovery status.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs deploy/profile -n test-hotel-reservation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs deploy/recommendation -n test-hotel-reservation --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Check recommendation service logs for successful DB init and Consul registration as a sanity check.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs deploy/recommendation -n test-hotel-reservation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs deploy/search -n test-hotel-reservation --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Verify the search service registers successfully with Consul, supporting timeline and readiness analysis.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl logs deploy/search -n test-hotel-reservation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs deploy/consul -n test-hotel-reservation --tail=200\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Inspect Consul logs to validate agent startup and incoming service registration/health queries.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl logs deploy/consul -n test-hotel-reservation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs deploy/frontend -n test-hotel-reservation --tail=200\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Check frontend logs; reveals connection refused errors to consul:8500 indicating discovery/communication failures.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl logs deploy/frontend -n test-hotel-reservation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get events -n test-hotel-reservation --sort-by=.lastTimestamp\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Review chronological cluster events to detect provisioning issues and timing of service readiness.",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl get events -n test-hotel-reservation --sort-by=.lastTimestamp\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Inspect deployments, container images, and availability to verify configuration and rollouts.",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List services and cluster IPs/ports, confirming the Consul service endpoint used by clients.",
        "sequence_number": 12,
        "original_command": "exec_shell(\"kubectl get svc -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the namespace to assess overall workload status and readiness.",
        "sequence_number": 13,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      }
    ]
  },
  {
    "problem_id": "k8s_target_port-misconfig-mitigation-2",
    "key_commands": [
      {
        "command": "submit()",
        "type": "execute_command",
        "importance_score": 1,
        "description": "Submit the mitigation for evaluation after verification.",
        "sequence_number": 1,
        "original_command": "submit()"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deploy/nginx-thrift --since=2m | tail -n 80\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Further verify from the gateway logs that connection errors subside after the fix",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deploy/nginx-thrift --since=2m | tail -n 80\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deploy/compose-post-service --since=5m | tail -n 200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Re-check client logs (compose-post-service) for improvements in connecting to text-service.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deploy/compose-post-service --since=5m | tail -n 200\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network -o name | xargs -I{} sh -c 'echo ==== {}; kubectl logs -n test-social-network {} --all<REPLICA_SUFFIX> --since=2m 2>/dev/null | grep -i \\\"connection refused\\\" | wc -l'\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Confirm across pods that recent 'connection refused' occurrences have dropped to zero",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network -o name | xargs -I{} sh -c 'echo ==== {}; kubectl logs -n test-social-network {} --all-containers --since=2m 2>/dev/null | grep -i \\\"connection refused\\\" | wc -l'\")",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-containers",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 138
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deploy/compose-post-service --since=2m | tail -n 100\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Check compose-post-service logs post-fix to ensure connection errors are no longer occurring",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deploy/compose-post-service --since=2m | tail -n 100\")"
      },
      {
        "command": "exec_shell(\"kubectl get pod -n test-social-network text-service-<POD_SUFFIX> -o jsonpath=\\'{.spec.containers[*].ports}\\'\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Confirm the container's actual listening port to compare against Service targetPort.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get pod -n test-social-network text-service-585f7cbc5f-snl5d -o jsonpath=\\'{.spec.containers[*].ports}\\'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "585f7cbc5f-snl5d",
            "placeholder": "<POD_SUFFIX>",
            "position": 64
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl patch service text-service -n test-social-network --type='json' -p='[{\\\"op\\\":\\\"replace\\\",\\\"path\\\":\\\"/spec/ports/0/targetPort\\\",\\\"value\\\":9090}]'\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Fix the Service by setting targetPort to 9090 so it matches the container's port",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl patch service text-service -n test-social-network --type='json' -p='[{\\\"op\\\":\\\"replace\\\",\\\"path\\\":\\\"/spec/ports/0/targetPort\\\",\\\"value\\\":9090}]'\")"
      },
      {
        "command": "exec_shell(\"kubectl get pod -n test-social-network text-service-<POD_SUFFIX> -o jsonpath='{.spec.containers[*].ports}'\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Verify the container's listening port (9090) to determine the correct targetPort",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl get pod -n test-social-network text-service-585f7cbc5f-snl5d -o jsonpath='{.spec.containers[*].ports}'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "585f7cbc5f-snl5d",
            "placeholder": "<POD_SUFFIX>",
            "position": 64
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network text-service -o yaml\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect text-service Service spec to confirm misconfigured targetPort (9999)",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network text-service -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n test-social-network text-service -o yaml\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect text-service Endpoints to see the actual backend port exposed (revealed incorrect port 9999)",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl get endpoints -n test-social-network text-service -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deploy/text-service --since=10m\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Check text-service logs to confirm the service starts and to rule out internal failures",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deploy/text-service --since=10m\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deploy/user-service --since=5m\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Inspect user-service logs for broader service health context.",
        "sequence_number": 12,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deploy/user-service --since=5m\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network -o name | xargs -I{} sh -c 'echo ==== {}; kubectl logs -n test-social-network {} --all<REPLICA_SUFFIX> --since=5m 2>/dev/null | grep -iE \\\"error|fail|exception\\\" -C1 || true'\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Scan recent pod logs for errors to detect connection issues (e.g., connection refused to text-service:9090)",
        "sequence_number": 13,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network -o name | xargs -I{} sh -c 'echo ==== {}; kubectl logs -n test-social-network {} --all-containers --since=5m 2>/dev/null | grep -iE \\\"error|fail|exception\\\" -C1 || true'\")",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-containers",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 138
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deploy/nginx-thrift --since=5m\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Check frontend gateway logs for request failures indicating downstream issues",
        "sequence_number": 14,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deploy/nginx-thrift --since=5m\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "List all services to identify relevant Service objects and exposed ports",
        "sequence_number": 15,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "List all pods in the namespace to confirm workloads are running",
        "sequence_number": 16,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      }
    ]
  },
  {
    "problem_id": "k8s_target_port-misconfig-analysis-2",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "List all pods in the namespace to confirm components (including text-service) are running.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List services and their ports to see the published port for text-service.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deployment/compose-post-service --tail=200\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Check client service logs showing repeated 'Connection refused' to text-service:9090, indicating service reachability issues.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deployment/compose-post-service --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deployment/text-service --tail=200\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Verify text-service started successfully, narrowing issue to networking/mapping rather than app crash.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deployment/text-service --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl exec -n test-social-network text-service-<POD_SUFFIX> -- sh -c 'ss -ltnp || netstat -tulpen'\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Attempt to check listening ports inside the text-service container (tools missing), minor contribution.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl exec -n test-social-network text-service-585f7cbc5f-hx8sp -- sh -c 'ss -ltnp || netstat -tulpen'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "585f7cbc5f-hx8sp",
            "placeholder": "<POD_SUFFIX>",
            "position": 61
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n test-social-network text-service -o yaml && kubectl get deploy -n test-social-network text-service -o yaml\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Retrieve Endpoints and Deployment details; reveals Endpoints port is 9999 while containerPort is 9090, indicating a targetPort mismatch.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get endpoints -n test-social-network text-service -o yaml && kubectl get deploy -n test-social-network text-service -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network text-service -o yaml\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect text-service definition; confirms Service targetPort is 9999 causing traffic to be forwarded to the wrong container port.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network text-service -o yaml\")"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_kafka_queue_problems-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "List all pods in the astronomy-shop namespace to spot restart counts and overall status.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl get events -n astronomy-shop --sort-by=.metadata.creationTimestamp\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "View chronological cluster events to detect warnings like BackOff and CrashLoopBackOff for affected pods.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get events -n astronomy-shop --sort-by=.metadata.creationTimestamp\")"
      },
      {
        "command": "exec_shell(\"kubectl logs ad-<POD_SUFFIX> -n astronomy-shop --tail=200\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Fetch recent logs from the ad pod to investigate restart symptoms.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs ad-94bd576b5-wsl7q -n astronomy-shop --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-wsl7q",
            "placeholder": "<POD_SUFFIX>",
            "position": 28
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs fraud-detection-<POD_SUFFIX> -n astronomy-shop --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Attempt to read current logs from the fraud-detection pod for crash analysis.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs fraud-detection-65868bcdb5-fb5cp -n astronomy-shop --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-fb5cp",
            "placeholder": "<POD_SUFFIX>",
            "position": 41
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs fraud-detection-<POD_SUFFIX> -n astronomy-shop -<REPLICA_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Attempt to read previous container logs from the fraud-detection pod to diagnose recent crashes.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs fraud-detection-65868bcdb5-fb5cp -n astronomy-shop --previous --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-fb5cp",
            "placeholder": "<POD_SUFFIX>",
            "position": 41
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 73
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod ad-<POD_SUFFIX> -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Describe the ad pod to confirm restart history and exit codes (e.g., 137) indicating instability.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl describe pod ad-94bd576b5-wsl7q -n astronomy-shop\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-wsl7q",
            "placeholder": "<POD_SUFFIX>",
            "position": 36
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod fraud-detection-<POD_SUFFIX> -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Describe the fraud-detection pod to verify CrashLoopBackOff state and environment (e.g., KAFKA_ADDR), directly evidencing the anomaly.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl describe pod fraud-detection-65868bcdb5-fb5cp -n astronomy-shop\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-fb5cp",
            "placeholder": "<POD_SUFFIX>",
            "position": 49
          }
        ]
      },
      {
        "command": "submit(\"Yes\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the final decision confirming anomalies were detected.",
        "sequence_number": 8,
        "original_command": "submit(\"Yes\")"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_kafka_queue_problems-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Review Envoy proxy initialization to rule out edge proxy issues.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/frontend-proxy --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "frontend-proxy",
            "placeholder": "<POD_SUFFIX>",
            "position": 50
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/ad --tail=200\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Confirm ad service is serving requests; auxiliary validation of non-faulty components.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/ad --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/product-catalog --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Check product-catalog reloads and server status to rule out catalog-related issues.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/product-catalog --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/fraud<REPLICA_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Fetches Fraud Detection logs; container selection noted but no evident faults.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/fraud-detection --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 55
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/shipping --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Verify shipping service operations and responses to ensure core business flows are unaffected.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/shipping --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/recommendation --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Inspect recommendation service logs to confirm normal request handling and further scope the issue.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/recommendation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/frontend --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Check frontend startup and readiness to ensure the UI layer is healthy.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/frontend --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/checkout --tail=200\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Gets initial checkout logs to look for errors; indicates container defaults but minimal diagnostic value.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/checkout --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/payment --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Verify payment service health and successful transactions to rule out payment as the fault source.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/payment --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/otel<REPLICA_SUFFIX> --tail=300\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect OpenTelemetry Collector logs; shows misconfigured OTLP protocol/port (gRPC vs HTTP) and connection errors",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/otel-collector --tail=300\")",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-collector",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 54
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/kafka --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Inspect Kafka broker logs to confirm broker health and differentiate queue overload from broker faults.",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/kafka --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/checkout --tail=500 --all-containers=true\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Fetch extended logs from all containers in the checkout deployment; reveals the active 'kafkaQueueProblems' feature flag causing deliberate queue overload.",
        "sequence_number": 12,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/checkout --tail=500 --all-containers=true\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/currency --tail=200\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect currency service logs; reveals OTLP gRPC exporter connection refused to otel-collector service IP:4317, indicating collector connectivity or config issue.",
        "sequence_number": 13,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/currency --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/load<REPLICA_SUFFIX> --tail=500\")",
        "type": "probe_command",
        "importance_score": 1,
        "description": "Retrieves additional load-generator logs for broader context on traffic and potential issues.",
        "sequence_number": 14,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/load-generator --tail=500\")",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-generator",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 54
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get svc -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List services and their cluster IPs/ports to verify Kafka and related endpoints for downstream log correlation.",
        "sequence_number": 15,
        "original_command": "exec_shell(\"kubectl get svc -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/load<REPLICA_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 1,
        "description": "Fetches recent logs from the load-generator to check if workload generation is functioning or showing errors.",
        "sequence_number": 16,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/load-generator --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-generator",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 54
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the astronomy-shop namespace to assess overall service health and identify targets for deeper inspection.",
        "sequence_number": 17,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      }
    ]
  },
  {
    "problem_id": "k8s_target_port-misconfig-localization-2",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "List pods in the namespace to verify all components are running and healthy.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List services and exposed ports to identify target service and its port configuration.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deploy/compose-post-service --tail=200\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Inspect client service logs; shows connection refused to text-service on port 9090, indicating service reachability/port issue.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deploy/compose-post-service --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deploy/text-service --tail=200\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Check text-service logs to confirm it is running and not crashing.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deploy/text-service --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints text-service -n test-social-network -o wide && kubectl get deploy text-service -n test-social-network -o yaml && kubectl get svc text-service -n test-social-network -o yaml\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Inspect endpoints, deployment, and service configuration for text-service; reveals service targetPort set to 9999 while containerPort is 9090, confirming a targetPort misconfiguration.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl get endpoints text-service -n test-social-network -o wide && kubectl get deploy text-service -n test-social-network -o yaml && kubectl get svc text-service -n test-social-network -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl exec -n test-social-network deploy/text-service -- ss -ltnp || kubectl exec -n test-social-network deploy/text-service -- netstat -tlnp\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Attempt to verify which port the text-service listens on inside the container; failed due to missing tools but supports validation effort.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl exec -n test-social-network deploy/text-service -- ss -ltnp || kubectl exec -n test-social-network deploy/text-service -- netstat -tlnp\")"
      },
      {
        "command": "submit([\"text-service\"])",
        "type": "execute_command",
        "importance_score": 9,
        "description": "Submit the identified faulty component responsible for the misconfiguration.",
        "sequence_number": 7,
        "original_command": "submit([\"text-service\"])"
      }
    ]
  },
  {
    "problem_id": "k8s_target_port-misconfig-mitigation-3",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get svc post-storage-service -n test-social-network -o jsonpath=\\'{.spec.ports[0].targetPort}\\'; echo; kubectl get endpoints -n test-social-network post-storage-service -o wide; echo; kubectl logs -n test-social-network -l service=compose-post-service --tail=50\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Validate fix: confirm Service targetPort and endpoints now use 9090; recheck client logs",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get svc post-storage-service -n test-social-network -o jsonpath=\\'{.spec.ports[0].targetPort}\\'; echo; kubectl get endpoints -n test-social-network post-storage-service -o wide; echo; kubectl logs -n test-social-network -l service=compose-post-service --tail=50\")"
      },
      {
        "command": "exec_shell(\"kubectl -n test-social-network patch svc post-storage-service -p \\'{\\\\\"spec\\\\\":{\\\\\"ports\\\\\":[{\\\\\"name\\\\\":\\\\\"9090\\\\\",\\\\\"port\\\\\":9090,\\\\\"protocol\\\\\":\\\\\"TCP\\\\\",\\\\\"targetPort\\\\\":9090}]}}\\'\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Fix Service by setting targetPort to 9090 to match the container",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl -n test-social-network patch svc post-storage-service -p \\'{\\\\\"spec\\\\\":{\\\\\"ports\\\\\":[{\\\\\"name\\\\\":\\\\\"9090\\\\\",\\\\\"port\\\\\":9090,\\\\\"protocol\\\\\":\\\\\"TCP\\\\\",\\\\\"targetPort\\\\\":9090}]}}\\'\")"
      },
      {
        "command": "exec_shell(\"kubectl get pod -n test-social-network -l service=post-storage-service -o name | xargs -I{} kubectl exec -n test-social-network {} -- sh -c 'ss -ltnp || netstat -tulpn'\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Attempt to verify listening ports inside the pod (diagnostic; command not available)",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get pod -n test-social-network -l service=post-storage-service -o name | xargs -I{} kubectl exec -n test-social-network {} -- sh -c 'ss -ltnp || netstat -tulpn'\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network -o jsonpath='{range .items[*]}{.metadata.name}{\\\"\\\\t\\\"}{range .spec.ports[*]}{.port}:{.targetPort}{\\\"\\\\t\\\"}{end}{\\\"\\\\n\\\"}{end}'\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Cross-check all services to ensure port-to-targetPort mappings are consistent cluster-wide.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network -o jsonpath='{range .items[*]}{.metadata.name}{\\\"\\\\t\\\"}{range .spec.ports[*]}{.port}:{.targetPort}{\\\"\\\\t\\\"}{end}{\\\"\\\\n\\\"}{end}'\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc post-storage-service -n test-social-network -o jsonpath='{.spec.ports[0].targetPort}'; echo; kubectl get endpoints -n test-social-network post-storage-service -o wide; echo; kubectl logs -n test-social-network -l service=compose-post-service --tail=50\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Verify the fix by confirming targetPort is 9090, endpoints reflect port 9090, and check client logs.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl get svc post-storage-service -n test-social-network -o jsonpath='{.spec.ports[0].targetPort}'; echo; kubectl get endpoints -n test-social-network post-storage-service -o wide; echo; kubectl logs -n test-social-network -l service=compose-post-service --tail=50\")"
      },
      {
        "command": "exec_shell(\"kubectl -n test-social-network patch svc post-storage-service -p '{\\\"spec\\\":{\\\"ports\\\":[{\\\"name\\\":\\\"9090\\\",\\\"port\\\":9090,\\\"protocol\\\":\\\"TCP\\\",\\\"targetPort\\\":9090}]}}'\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Patch the Service to correct targetPort from 9999 to 9090, resolving the connectivity issue.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl -n test-social-network patch svc post-storage-service -p '{\\\"spec\\\":{\\\"ports\\\":[{\\\"name\\\":\\\"9090\\\",\\\"port\\\":9090,\\\"protocol\\\":\\\"TCP\\\",\\\"targetPort\\\":9090}]}}'\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc post-storage-service -n test-social-network -o yaml\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Inspect the Service spec to identify targetPort is incorrectly set to 9999.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get svc post-storage-service -n test-social-network -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network -l service=post-storage-service --tail=200\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Inspect post-storage-service logs to confirm the service is up",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network -l service=post-storage-service --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n test-social-network post-storage-service -o wide\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Check the Service endpoints to see the backend port (9999), exposing a mismatch with the pod's port.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl get endpoints -n test-social-network post-storage-service -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl describe deploy/post-storage-service -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Describe the post-storage-service deployment to confirm the container exposes port 9090.",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl describe deploy/post-storage-service -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network -o wide\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List services and exposed ports to spot potential routing issues",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network -l service=compose-post-service --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Inspect compose-post-service logs to reveal connection refused to post-storage-service on port 9090, indicating a service connectivity issue.",
        "sequence_number": 12,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network -l service=compose-post-service --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "List pods in the namespace to verify workloads are running",
        "sequence_number": 13,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      }
    ]
  },
  {
    "problem_id": "revoke_auth_mongodb-mitigation-2",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get deploy rate -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Confirm rate deployment availability to validate that the service has recovered.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get deploy rate -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation rate-<POD_SUFFIX> --since=2m\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Re-check rate service logs post-mitigation to confirm successful initialization and normal operation.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation rate-7bdc978679-fxx7g --since=2m\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7bdc978679-fxx7g",
            "placeholder": "<POD_SUFFIX>",
            "position": 56
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation mongodb-rate-<POD_SUFFIX> -c hotel-reserv-rate-mongo -- mongo admin -u admin -p admin --authenticationDatabase admin --quiet --eval 'db.getUser(\\\"admin\\\")'\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Verify that the admin user now has the required readWrite role on rate-db.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation mongodb-rate-56cc8659c9-slsbx -c hotel-reserv-rate-mongo -- mongo admin -u admin -p admin --authenticationDatabase admin --quiet --eval 'db.getUser(\\\"admin\\\")'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "56cc8659c9-slsbx",
            "placeholder": "<POD_SUFFIX>",
            "position": 64
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation mongodb-rate-<POD_SUFFIX> -c hotel-reserv-rate-mongo -- bash /scripts/revoke-miti<POD_SUFFIX>e-mongo.sh\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Execute mitigation script inside MongoDB pod to restore readWrite privilege for admin on rate-db.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation mongodb-rate-56cc8659c9-slsbx -c hotel-reserv-rate-mongo -- bash /scripts/revoke-mitigate-admin-rate-mongo.sh\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "56cc8659c9-slsbx",
            "placeholder": "<POD_SUFFIX>",
            "position": 64
          },
          {
            "type": "k8s_pod_suffix",
            "original": "mitigate-admin",
            "placeholder": "<POD_SUFFIX>",
            "position": 132
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get configmap mongo-rate-script -n test-hotel-reservation -o yaml\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "View init DB script ConfigMap to understand intended user/role provisioning.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl get configmap mongo-rate-script -n test-hotel-reservation -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get configmap failure-admin-rate -n test-hotel-reservation -o yaml\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Discover remediation scripts available via ConfigMap for restoring admin privileges.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get configmap failure-admin-rate -n test-hotel-reservation -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy mongodb-rate -n test-hotel-reservation -o yaml\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Examine MongoDB deployment to discover mounted scripts/configs that can fix roles.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get deploy mongodb-rate -n test-hotel-reservation -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation mongodb-rate-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Check MongoDB pod logs to confirm authentication/authorization configuration and error context.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation mongodb-rate-56cc8659c9-slsbx\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "56cc8659c9-slsbx",
            "placeholder": "<POD_SUFFIX>",
            "position": 64
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation rate-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Inspect rate service logs to identify the error, revealing MongoDB authorization failure.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation rate-7bdc978679-fxx7g\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7bdc978679-fxx7g",
            "placeholder": "<POD_SUFFIX>",
            "position": 56
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "List pods in the namespace to identify failing components and discover pod names.",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_loadgenerator_flood_homepage-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "List pods in the astronomy-shop namespace to identify any pods with restarts or failing status.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n astronomy-shop fraud-detection-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Inspect detailed state and events of the suspicious fraud-detection pod to find failure reasons (e.g., exit code 137, BackOff).",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod -n astronomy-shop fraud-detection-65868bcdb5-np4bf\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-np4bf",
            "placeholder": "<POD_SUFFIX>",
            "position": 67
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-<POD_SUFFIX> -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Fetch logs from the previous container instance to diagnose crash causes.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-65868bcdb5-np4bf --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-np4bf",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 73
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Fetch current logs of the fraud-detection container for additional diagnostic context.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-65868bcdb5-np4bf\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-np4bf",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Re-check pod statuses to confirm the fraud-detection pod is in CrashLoopBackOff, validating the anomaly.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      },
      {
        "command": "submit(\"Yes\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the anomaly detection decision indicating issues were found.",
        "sequence_number": 6,
        "original_command": "submit(\"Yes\")"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_image_slow_load-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Lists all pods in the astronomy-shop namespace to spot anomalies such as restarts and non-ready statuses.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n astronomy-shop fraud-detection-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Inspects the problematic pod for detailed state and events, revealing exit code 137 and BackOff restarts.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod -n astronomy-shop fraud-detection-65868bcdb5-sbs5h\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-sbs5h",
            "placeholder": "<POD_SUFFIX>",
            "position": 67
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-<POD_SUFFIX> -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Attempts to retrieve logs from the previously terminated container instance to diagnose the crash.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-65868bcdb5-sbs5h --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-sbs5h",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 73
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pod -n astronomy-shop fraud-detection-<POD_SUFFIX> -o json\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Fetches the pod specification and status in JSON to confirm restartCount and termination details programmatically.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl get pod -n astronomy-shop fraud-detection-65868bcdb5-sbs5h -o json\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-sbs5h",
            "placeholder": "<POD_SUFFIX>",
            "position": 62
          }
        ]
      }
    ]
  },
  {
    "problem_id": "pod_kill_hotel_res-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List all pods in the namespace to verify overall component health and status.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List all services and their cluster IPs/ports to confirm service exposure.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get svc -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Inspect deployments, replicas, and images to confirm expected app configuration.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl run tmp-curl --rm -i --restart=Never --image=curlimages/curl -n test-hotel-reservation -- -sS http://frontend:5000/\")",
        "type": "execute_command",
        "importance_score": 6,
        "description": "Create an ephemeral curl pod to verify the frontend service is reachable and serving content.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl run tmp-curl --rm -i --restart=Never --image=curlimages/curl -n test-hotel-reservation -- -sS http://frontend:5000/\")"
      },
      {
        "command": "exec_shell(\"kubectl run tmp-curl --rm -i --restart=Never --image=curlimages/curl -n test-hotel-reservation -- -sS 'http://search:8082/hotels?inDate=2015-04-09&outDate=2015-04-10&lat=37.7749&lon=-122.4194'\")",
        "type": "execute_command",
        "importance_score": 9,
        "description": "Create an ephemeral curl pod to directly test the search service endpoint; failures indicate the core anomaly.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl run tmp-curl --rm -i --restart=Never --image=curlimages/curl -n test-hotel-reservation -- -sS 'http://search:8082/hotels?inDate=2015-04-09&outDate=2015-04-10&lat=37.7749&lon=-122.4194'\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n test-hotel-reservation search -o wide\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Check the search service endpoints to confirm a backing pod/IP is registered.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get endpoints -n test-hotel-reservation search -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl run tmp-curl --rm -i --restart=Never --image=curlimages/curl -n test-hotel-reservation -- -v --max-time 5 http://search:8082/health || kubectl run tmp-curl2 --rm -i --restart=Never --image=curlimages/curl -n test-hotel-reservation -- -v --max-time 5 'http://search:8082/hotels?inDate=2015-04-09&outDate=2015-04-10&lat=37.7749&lon=-122.4194'\")",
        "type": "execute_command",
        "importance_score": 9,
        "description": "Run verbose health and functional checks from ephemeral curl pods against the search service to corroborate connectivity failures.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl run tmp-curl --rm -i --restart=Never --image=curlimages/curl -n test-hotel-reservation -- -v --max-time 5 http://search:8082/health || kubectl run tmp-curl2 --rm -i --restart=Never --image=curlimages/curl -n test-hotel-reservation -- -v --max-time 5 'http://search:8082/hotels?inDate=2015-04-09&outDate=2015-04-10&lat=37.7749&lon=-122.4194'\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation -l io.kompose.service=search --tail=200 && echo '---' && kubectl describe pod -n test-hotel-reservation -l io.kompose.service=search\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Fetch logs and describe the search pod to verify it is running and healthy despite external request failures.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation -l io.kompose.service=search --tail=200 && echo '---' && kubectl describe pod -n test-hotel-reservation -l io.kompose.service=search\")"
      },
      {
        "command": "exec_shell(\"kubectl run tmp-curl --rm -i --restart=Never --image=curlimages/curl -n test-hotel-reservation -- -sS 'http://frontend:5000/hotels?inDate=2015-04-09&outDate=2015-04-10&lat=37.7749&lon=-122.4194'\")",
        "type": "execute_command",
        "importance_score": 6,
        "description": "Validate end-to-end functionality via the frontend path to compare with direct search access behavior.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl run tmp-curl --rm -i --restart=Never --image=curlimages/curl -n test-hotel-reservation -- -sS 'http://frontend:5000/hotels?inDate=2015-04-09&outDate=2015-04-10&lat=37.7749&lon=-122.4194'\")"
      },
      {
        "command": "exec_shell(\"kubectl run tmp-busy --rm -i --restart=Never --image=busybox:1.36 -n test-hotel-reservation -- sh -c 'wget -S -O- http://search:8082/health || wget -S -O- \\\"http://search:8082/hotels?inDate=2015-04-09&outDate=2015-04-10&lat=37.7749&lon=-122.4194\\\"' \")",
        "type": "execute_command",
        "importance_score": 7,
        "description": "Cross-validate connectivity issues using wget from a BusyBox pod to rule out client image/tooling issues.",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl run tmp-busy --rm -i --restart=Never --image=busybox:1.36 -n test-hotel-reservation -- sh -c 'wget -S -O- http://search:8082/health || wget -S -O- \\\"http://search:8082/hotels?inDate=2015-04-09&outDate=2015-04-10&lat=37.7749&lon=-122.4194\\\"' \")"
      },
      {
        "command": "exec_shell(\"kubectl run curl-test --restart=Never --image=curlimages/curl -n test-hotel-reservation -- -v --max-time 5 http://search:8082/health && sleep 1; kubectl logs -n test-hotel-reservation curl-test || true; kubectl get pod -n test-hotel-reservation curl-test -o wide || true\")",
        "type": "execute_command",
        "importance_score": 4,
        "description": "Attempt a non-interactive curl pod to probe search health and retrieve its logs/status for further evidence.",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl run curl-test --restart=Never --image=curlimages/curl -n test-hotel-reservation -- -v --max-time 5 http://search:8082/health && sleep 1; kubectl logs -n test-hotel-reservation curl-test || true; kubectl get pod -n test-hotel-reservation curl-test -o wide || true\")"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_recommendation_service_cache_failure-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the astronomy-shop namespace to identify unhealthy pods and restarts.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop ad-<POD_SUFFIX> --previous; echo '---'; kubectl logs -n astronomy-shop ad-94b<POD_SUFFIX>cho '==='; kubectl logs -n astronomy-shop fraud-detection-65868b<POD_SUFFIX>vious; echo '---'; kubectl logs -n astronomy-shop fraud-detection-65868bcdb5<POD_SUFFIX>",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Fetch previous and current logs for the ad and fraud-detection pods to detect crash loops or runtime errors.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop ad-94bd576b5-qk5kt --previous; echo '---'; kubectl logs -n astronomy-shop ad-94bd576b5-qk5kt; echo '==='; kubectl logs -n astronomy-shop fraud-detection-65868bcdb5-w528m --previous; echo '---'; kubectl logs -n astronomy-shop fraud-detection-65868bcdb5-w528m\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-qk5kt",
            "placeholder": "<POD_SUFFIX>",
            "position": 46
          },
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-qk5kt",
            "placeholder": "<POD_SUFFIX>",
            "position": 120
          },
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-w528m",
            "placeholder": "<POD_SUFFIX>",
            "position": 196
          },
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-w528m",
            "placeholder": "<POD_SUFFIX>",
            "position": 284
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n astronomy-shop ad-<POD_SUFFIX>; echo '---'; kubectl logs -n astronomy-shop ad-94b<POD_SUFFIX> ad -<REPLICA_SUFFIX> || true; echo '---'; kubectl logs -n astronomy-shop ad-94bd57<POD_SUFFIX> || true; echo '==='; kubectl describe pod -n astronomy-shop fraud-detection-65868bcdb<POD_SUFFIX>--'; kubectl logs -n astronomy-shop fraud-detection-65868bcdb5-w5<POD_SUFFIX>e<REPLICA_SUFFIX>revious || true; echo '---'; kubectl logs -n astronomy-shop fraud-detection-65868bcdb5-w528m <POD_SUFFIX>on || true; echo '==='; kubectl logs -n astronomy-shop load-generator-68b6f899f5-6tntx | ta<POD_SUFFIX>",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Describe ad and fraud-detection pods to inspect events and states, gather container logs for both (including previous), and review load-generator logs for client-side errors to correlate impact.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl describe pod -n astronomy-shop ad-94bd576b5-qk5kt; echo '---'; kubectl logs -n astronomy-shop ad-94bd576b5-qk5kt -c ad --previous || true; echo '---'; kubectl logs -n astronomy-shop ad-94bd576b5-qk5kt -c ad || true; echo '==='; kubectl describe pod -n astronomy-shop fraud-detection-65868bcdb5-w528m; echo '---'; kubectl logs -n astronomy-shop fraud-detection-65868bcdb5-w528m -c fraud-detection --previous || true; echo '---'; kubectl logs -n astronomy-shop fraud-detection-65868bcdb5-w528m -c fraud-detection || true; echo '==='; kubectl logs -n astronomy-shop load-generator-68b6f899f5-6tntx | tail -n 120\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-qk5kt",
            "placeholder": "<POD_SUFFIX>",
            "position": 54
          },
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-qk5kt",
            "placeholder": "<POD_SUFFIX>",
            "position": 117
          },
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-qk5kt",
            "placeholder": "<POD_SUFFIX>",
            "position": 205
          },
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-w528m",
            "placeholder": "<POD_SUFFIX>",
            "position": 303
          },
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-w528m",
            "placeholder": "<POD_SUFFIX>",
            "position": 380
          },
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-w528m",
            "placeholder": "<POD_SUFFIX>",
            "position": 495
          },
          {
            "type": "k8s_pod_suffix",
            "original": "68b6f899f5-6tntx",
            "placeholder": "<POD_SUFFIX>",
            "position": 598
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 134
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 400
          }
        ]
      },
      {
        "command": "submit([\"fraud<REPLICA_SUFFIX>\"])",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the identified faulty component to the orchestrator.",
        "sequence_number": 4,
        "original_command": "submit([\"fraud-detection\"])",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 14
          }
        ]
      }
    ]
  },
  {
    "problem_id": "network_delay_hotel_res-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the test-hotel-reservation namespace to verify component readiness and status.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation frontend-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Inspect frontend logs; reveals repeated connection refused errors to consul:8500 indicating a service discovery connectivity issue.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation frontend-7fc7ddc9db-j6skk --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7fc7ddc9db-j6skk",
            "placeholder": "<POD_SUFFIX>",
            "position": 60
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation consul-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Check Consul agent logs to confirm it is running and handling requests, helping differentiate between Consul outage vs network connectivity problems.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation consul-78c8d79bb-rjgbq --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "78c8d79bb-rjgbq",
            "placeholder": "<POD_SUFFIX>",
            "position": 58
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List services with cluster IPs and ports to validate Consul service exposure (ClusterIP and port 8500).",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl get svc -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation search-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Verify search service initializes and registers in Consul; helps rule out downstream service failures.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation search-5c64c8f5bc-bjmcs --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5c64c8f5bc-bjmcs",
            "placeholder": "<POD_SUFFIX>",
            "position": 58
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation profile-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Check profile service logs to confirm normal startup and Consul registration.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation profile-8b6dd7c6c-nv29z --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "8b6dd7c6c-nv29z",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation recommendation-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Check recommendation service logs for normal operation and Consul registration.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation recommendation-6879fb56bf-gtb4t --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "6879fb56bf-gtb4t",
            "placeholder": "<POD_SUFFIX>",
            "position": 66
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation rate-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Check rate service logs for healthy startup and Consul registration.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation rate-7bdc978679-zkzmk --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7bdc978679-zkzmk",
            "placeholder": "<POD_SUFFIX>",
            "position": 56
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation reservation-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Check reservation service logs for normal initialization and registration in Consul.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation reservation-78c9f7976b-qzgcm --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "78c9f7976b-qzgcm",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Check geo service logs to verify successful startup and Consul registration.",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-84fbc958c7-st7hm --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-st7hm",
            "placeholder": "<POD_SUFFIX>",
            "position": 55
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Inspect service endpoints to confirm backends are registered and reachable via ClusterIP/ports, supporting network path validation.",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl get endpoints -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation user-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Check user service logs to ensure healthy startup and Consul registration.",
        "sequence_number": 12,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation user-66d5d6f874-xr49b --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "66d5d6f874-xr49b",
            "placeholder": "<POD_SUFFIX>",
            "position": 56
          }
        ]
      }
    ]
  },
  {
    "problem_id": "revoke_auth_mongodb-localization-2",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the namespace to spot failing components and choose next diagnostics.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/rate -<REPLICA_SUFFIX> || kubectl logs -n test-hotel-reservation deploy/rate\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect rate service logs; reveals 'not authorized on rate-db' errors indicating DB auth/permissions issue.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/rate --previous || kubectl logs -n test-hotel-reservation deploy/rate\")",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 64
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/mongodb-rate --tail=200\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Check MongoDB (mongodb-rate) logs to confirm authentication/authorization failures linked to the rate-db operations.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/mongodb-rate --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation deploy/mongodb-rate -- sh -c 'ls -l /docker-entrypoint-initdb.d && echo ==== && for f in /docker-entrypoint-initdb.d/*; do echo \\\"--- $f ---\\\"; cat \\\"$f\\\"; echo; done'\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Attempt to inspect MongoDB init scripts to verify user/role setup; auxiliary verification of auth configuration.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation deploy/mongodb-rate -- sh -c 'ls -l /docker-entrypoint-initdb.d && echo ==== && for f in /docker-entrypoint-initdb.d/*; do echo \\\"--- $f ---\\\"; cat \\\"$f\\\"; echo; done'\")"
      },
      {
        "command": "exec_shell(\"kubectl describe deploy/rate -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Describe the rate deployment to review configuration and environment; minimal contribution to root-cause.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl describe deploy/rate -n test-hotel-reservation\")"
      },
      {
        "command": "submit([\"mongodb-rate\"])",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the identified faulty component (mongodb-rate) as the root cause.",
        "sequence_number": 6,
        "original_command": "submit([\"mongodb-rate\"])"
      }
    ]
  },
  {
    "problem_id": "redeploy_without_PV-analysis-1",
    "key_commands": [
      {
        "command": "submit(\"None\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the conclusion that no faults were detected based on healthy pod states and successful service/Consul interactions.",
        "sequence_number": 1,
        "original_command": "submit(\"None\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Get detailed pod information including IPs and node placement for correlation with logs and services.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/geo --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Verify geo service DB connectivity and Consul registration.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/geo --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/user --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Verify user service DB connectivity and Consul registration.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/user --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/rate --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Verify rate service DB/memcached connectivity and Consul registration.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/rate --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/profile --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Verify profile service DB/memcached connectivity and Consul registration.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/profile --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/reservation --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Verify reservation service DB/memcached connectivity and Consul registration.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/reservation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/recommendation --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Verify recommendation service DB connectivity and Consul registration.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/recommendation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/search --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Verify search service startup, Consul registration, and dependencies.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/search --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/consul --tail=200\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Check Consul logs to validate service discovery health and registrations from services.",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/consul --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/frontend --tail=200\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Inspect frontend deployment logs for client-facing errors and downstream dependency issues.",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deployment/frontend --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all services with details to verify service endpoints and exposure.",
        "sequence_number": 12,
        "original_command": "exec_shell(\"kubectl get svc -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "List the status of all pods in the test-hotel-reservation namespace to establish baseline health.",
        "sequence_number": 13,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_payment_service_unreachable-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the astronomy-shop namespace to identify unhealthy or restarting services.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-<POD_SUFFIX> --since=10m\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Attempt to fetch recent logs from the fraud-detection pod to investigate failures.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-65868bcdb5-8xt88 --since=10m\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-8xt88",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n astronomy-shop fraud-detection-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Describe the fraud-detection pod to inspect status, events, and CrashLoopBackOff details.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl describe pod -n astronomy-shop fraud-detection-65868bcdb5-8xt88\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-8xt88",
            "placeholder": "<POD_SUFFIX>",
            "position": 67
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-<POD_SUFFIX> -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Fetch logs from the previous container instance to analyze the crash in the fraud-detection pod.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-65868bcdb5-8xt88 --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-8xt88",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 73
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-<POD_SUFFIX> -c fraud<REPLICA_SUFFIX> --since<REPLICA_SUFFIX>stamps\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Retrieve recent, timestamped logs from the fraud-detection container explicitly to gather diagnostic details.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-65868bcdb5-8xt88 -c fraud-detection --since=10m --timestamps\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-8xt88",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 80
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-timestamps",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 104
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop payment-<POD_SUFFIX> --since=10m\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Check payment service logs to verify it is functioning, aiding root-cause isolation.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop payment-7597577cb5-8txqp --since=10m\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7597577cb5-8txqp",
            "placeholder": "<POD_SUFFIX>",
            "position": 51
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop checkout-<POD_SUFFIX> --since=10m\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Inspect checkout service logs as ancillary verification during fault isolation.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop checkout-5bc54f8cd8-zqqb5 --since=10m\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5bc54f8cd8-zqqb5",
            "placeholder": "<POD_SUFFIX>",
            "position": 52
          }
        ]
      },
      {
        "command": "submit([\"fraud<REPLICA_SUFFIX>\"])",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the identified faulty component as the root cause.",
        "sequence_number": 8,
        "original_command": "submit([\"fraud-detection\"])",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 14
          }
        ]
      }
    ]
  },
  {
    "problem_id": "assign_to_non_existent_node_social_net-mitigation-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the namespace to identify any pods in Pending state.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod user-service-<POD_SUFFIX> -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Inspect the Pending pod to see scheduling events and detect nodeSelector/taint issues.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod user-service-5b549cc8dc-4cx9c -n test-social-network\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5b549cc8dc-4cx9c",
            "placeholder": "<POD_SUFFIX>",
            "position": 46
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get nodes --show-labels\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Check available node labels to verify whether the target node label exists.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get nodes --show-labels\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy user-service -n test-social-network -o yaml\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Fetch deployment spec to confirm the nodeSelector causing unschedulability.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl get deploy user-service -n test-social-network -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl patch deployment user-service -n test-social-network --type=json -p='[{\\\"op\\\":\\\"remove\\\",\\\"path\\\":\\\"/spec/template/spec/nodeSelector\\\"}]'\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Remove the nodeSelector from the deployment to allow scheduling on available nodes.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl patch deployment user-service -n test-social-network --type=json -p='[{\\\"op\\\":\\\"remove\\\",\\\"path\\\":\\\"/spec/template/spec/nodeSelector\\\"}]'\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network -o wide\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Verify that a new pod is scheduled and running on an available node.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "List services to confirm service exposure post-mitigation.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network\")"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_ad_service_high_cpu-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Lists all pods in the astronomy-shop namespace to identify any pods in an error or abnormal state.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n astronomy-shop fraud-detection-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Describes the specific failing pod to gather detailed state, events, and CrashLoopBackOff evidence.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod -n astronomy-shop fraud-detection-65868bcdb5-j2555\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-j2555",
            "placeholder": "<POD_SUFFIX>",
            "position": 67
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop pod/fraud-detection-<POD_SUFFIX> -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Retrieves logs from the previous instance of the container to investigate crash reasons.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop pod/fraud-detection-65868bcdb5-j2555 --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-j2555",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 77
          }
        ]
      },
      {
        "command": "submit(\"Yes\")",
        "type": "execute_command",
        "importance_score": 9,
        "description": "Submits the detection result indicating that an anomaly was found.",
        "sequence_number": 4,
        "original_command": "submit(\"Yes\")"
      }
    ]
  },
  {
    "problem_id": "user_unregistered_mongodb-mitigation-2",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation; kubectl logs -n test-hotel-reservation rate-<POD_SUFFIX> --tail=100\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Confirm the rate service recovers and operates normally after mitigation.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation; kubectl logs -n test-hotel-reservation rate-7bdc978679-brc8j --tail=100\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7bdc978679-brc8j",
            "placeholder": "<POD_SUFFIX>",
            "position": 100
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation $(kubectl get pod -n test-hotel-reservation -l io.kompose.service=mongodb-rate -o jsonpath='{.items[0].metadata.name}') -- bash -lc 'mongo admin -u root -p root --authenticationDatabase admin --quiet --eval \\\"JSON.stringify(db.getUser(\\\\\\\"admin\\\\\\\"))\\\"'\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Attempt to verify existence of the admin user directly in MongoDB.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation $(kubectl get pod -n test-hotel-reservation -l io.kompose.service=mongodb-rate -o jsonpath='{.items[0].metadata.name}') -- bash -lc 'mongo admin -u root -p root --authenticationDatabase admin --quiet --eval \\\"JSON.stringify(db.getUser(\\\\\\\"admin\\\\\\\"))\\\"'\")"
      },
      {
        "command": "submit()",
        "type": "execute_command",
        "importance_score": 3,
        "description": "Submit the mitigation for evaluation after confirming service recovery.",
        "sequence_number": 3,
        "original_command": "submit()"
      },
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation $(kubectl get pod -n test-hotel-reservation -l io.kompose.service=mongodb-rate -o jsonpath='{.items[0].metadata.name}') -- bash -lc 'bash /scripts/remove-<POD_SUFFIX>-rate-mongo.sh'\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Execute mitigation script via bash to recreate admin user and restore privileges in MongoDB.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation $(kubectl get pod -n test-hotel-reservation -l io.kompose.service=mongodb-rate -o jsonpath='{.items[0].metadata.name}') -- bash -lc 'bash /scripts/remove-mitigate-admin-rate-mongo.sh'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "mitigate-admin",
            "placeholder": "<POD_SUFFIX>",
            "position": 205
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation $(kubectl get pod -n test-hotel-reservation -l io.kompose.service=mongodb-rate -o jsonpath='{.items[0].metadata.name}') -- bash -lc 'chmod +x /scripts/remove-<POD_SUFFIX>-rate-mongo.sh && /scripts/remove-mi<POD_SUFFIX>ate-mongo.sh'\")",
        "type": "execute_command",
        "importance_score": 3,
        "description": "Attempt to execute mitigation script after chmod (failed due to read-only filesystem), informing correct approach.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation $(kubectl get pod -n test-hotel-reservation -l io.kompose.service=mongodb-rate -o jsonpath='{.items[0].metadata.name}') -- bash -lc 'chmod +x /scripts/remove-mitigate-admin-rate-mongo.sh && /scripts/remove-mitigate-admin-rate-mongo.sh'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "mitigate-admin",
            "placeholder": "<POD_SUFFIX>",
            "position": 209
          },
          {
            "type": "k8s_pod_suffix",
            "original": "mitigate-admin",
            "placeholder": "<POD_SUFFIX>",
            "position": 257
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get configmap mongo-rate-script failure-admin-rate -n test-hotel-reservation -o yaml\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "View initialization and mitigation scripts to plan admin user restoration.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get configmap mongo-rate-script failure-admin-rate -n test-hotel-reservation -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get configmaps,secrets,svc -n test-hotel-reservation | grep -E 'mongo|rate'; kubectl get pods -n test-hotel-reservation -l io.kompose.service=mongodb-rate -o name | xargs -I{} kubectl logs {} -n test-hotel-reservation --tail=200\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "List related resources and retrieve MongoDB pod logs, revealing SASL auth failures and missing admin user.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get configmaps,secrets,svc -n test-hotel-reservation | grep -E 'mongo|rate'; kubectl get pods -n test-hotel-reservation -l io.kompose.service=mongodb-rate -o name | xargs -I{} kubectl logs {} -n test-hotel-reservation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy rate mongodb-rate -n test-hotel-reservation -o yaml\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Inspect rate and mongodb-rate deployments to understand configuration and mounts.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl get deploy rate mongodb-rate -n test-hotel-reservation -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl logs rate-<POD_SUFFIX> -n test-hotel-reservation -c hotel-reserv-rate -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Fetch previous container logs for the rate service to capture the crash reason.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl logs rate-7bdc978679-brc8j -n test-hotel-reservation -c hotel-reserv-rate --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7bdc978679-brc8j",
            "placeholder": "<POD_SUFFIX>",
            "position": 30
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 91
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod rate-<POD_SUFFIX> -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Describe the failing rate pod to review container states and events.",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl describe pod rate-7bdc978679-brc8j -n test-hotel-reservation\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7bdc978679-brc8j",
            "placeholder": "<POD_SUFFIX>",
            "position": 38
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List all pods in the namespace to identify failing components.",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      }
    ]
  },
  {
    "problem_id": "k8s_target_port-misconfig-mitigation-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "List all pods in the namespace to confirm workloads are running.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network -o wide\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List services and their ports to identify potential service port issues.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Inspect endpoints for all services to detect mismatched target ports (user-service showing 9999).",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get endpoints -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl describe svc -n test-social-network user-service\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Describe the user-service to confirm Service targetPort is incorrectly set to 9999.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl describe svc -n test-social-network user-service\")"
      },
      {
        "command": "exec_shell(\"kubectl describe deploy -n test-social-network user-service\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Describe the user-service deployment to verify the container listens on port 9090, evidencing the mismatch.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl describe deploy -n test-social-network user-service\")"
      },
      {
        "command": "exec_shell(\"kubectl -n test-social-network patch svc user-service --type='json' -p='[{\\\"op\\\":\\\"replace\\\",\\\"path\\\":\\\"/spec/ports/0/targetPort\\\",\\\"value\\\":9090}]'\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Patch the user-service Service to set targetPort to 9090, fixing the misconfiguration.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl -n test-social-network patch svc user-service --type='json' -p='[{\\\"op\\\":\\\"replace\\\",\\\"path\\\":\\\"/spec/ports/0/targetPort\\\",\\\"value\\\":9090}]'\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n test-social-network user-service -o wide\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Verify that the user-service endpoints now advertise port 9090 after the patch.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get endpoints -n test-social-network user-service -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deploy/user-service --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Check user-service logs to confirm the service is running properly post-fix.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deploy/user-service --tail=200\")"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_image_slow_load-localization-1",
    "key_commands": [
      {
        "command": "submit([\"fraud<REPLICA_SUFFIX>\"])",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the identified faulty component to the orchestrator for evaluation.",
        "sequence_number": 1,
        "original_command": "submit([\"fraud-detection\"])",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 14
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop ad-<POD_SUFFIX> -c ad --tail=200 && echo '---' && kubectl logs -n astronomy-shop cart-6fd<POD_SUFFIX> cart --tail=200 && echo '---' && kubectl logs -n astronomy-shop checkout-5bc54f8<POD_SUFFIX>ckout --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Fetch container-specific logs for ad, cart, and checkout to verify normal operations conclusively.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop ad-94bd576b5-rvhf6 -c ad --tail=200 && echo '---' && kubectl logs -n astronomy-shop cart-6fd857c656-ldlbb -c cart --tail=200 && echo '---' && kubectl logs -n astronomy-shop checkout-5bc54f8cd8-kzk2f -c checkout --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-rvhf6",
            "placeholder": "<POD_SUFFIX>",
            "position": 46
          },
          {
            "type": "k8s_pod_suffix",
            "original": "6fd857c656-ldlbb",
            "placeholder": "<POD_SUFFIX>",
            "position": 132
          },
          {
            "type": "k8s_pod_suffix",
            "original": "5bc54f8cd8-kzk2f",
            "placeholder": "<POD_SUFFIX>",
            "position": 225
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n astronomy-shop fraud-detection-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Describe the fraud-detection pod to confirm CrashLoopBackOff state and review last exit codes, restart counts, and events.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl describe pod -n astronomy-shop fraud-detection-65868bcdb5-7gtsl\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-7gtsl",
            "placeholder": "<POD_SUFFIX>",
            "position": 67
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n astronomy-shop ad-<POD_SUFFIX> && echo '---' && kubectl describe pod -n astronomy-shop cart-6fd<POD_SUFFIX> echo '---' && kubectl describe pod -n astronomy-shop checkout-5bc54f8<POD_SUFFIX>",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Describe ad, cart, and checkout pods to confirm they are healthy and ready.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl describe pod -n astronomy-shop ad-94bd576b5-rvhf6 && echo '---' && kubectl describe pod -n astronomy-shop cart-6fd857c656-ldlbb && echo '---' && kubectl describe pod -n astronomy-shop checkout-5bc54f8cd8-kzk2f\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-rvhf6",
            "placeholder": "<POD_SUFFIX>",
            "position": 54
          },
          {
            "type": "k8s_pod_suffix",
            "original": "6fd857c656-ldlbb",
            "placeholder": "<POD_SUFFIX>",
            "position": 131
          },
          {
            "type": "k8s_pod_suffix",
            "original": "5bc54f8cd8-kzk2f",
            "placeholder": "<POD_SUFFIX>",
            "position": 213
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-<POD_SUFFIX> -c fraud<REPLICA_SUF<REPLICA_SUFFIX>evious --tail=200 || kubectl logs -n astronomy-shop fraud-detection-6586<POD<REPLICA_SUFFIX>aud-detection --tail=200\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Attempt to retrieve container-specific logs (current or previous) for the fraud-detection container in the pod.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-65868bcdb5-7gtsl -c fraud-detection --previous --tail=200 || kubectl logs -n astronomy-shop fraud-detection-65868bcdb5-7gtsl -c fraud-detection --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-7gtsl",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          },
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-7gtsl",
            "placeholder": "<POD_SUFFIX>",
            "position": 167
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 80
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 92
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 184
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop ad-<POD_SUFFIX> --tail=200 && echo '---' && kubectl logs -n astronomy-shop cart-6fd<POD_SUFFIX>tail=200 && echo '---' && kubectl logs -n astronomy-shop checkout-5bc54f8<POD_SUFFIX>=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Fetch logs from specific ad, cart, and checkout pods to assess behavior (initial non-container-specific attempt).",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop ad-94bd576b5-rvhf6 --tail=200 && echo '---' && kubectl logs -n astronomy-shop cart-6fd857c656-ldlbb --tail=200 && echo '---' && kubectl logs -n astronomy-shop checkout-5bc54f8cd8-kzk2f --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-rvhf6",
            "placeholder": "<POD_SUFFIX>",
            "position": 46
          },
          {
            "type": "k8s_pod_suffix",
            "original": "6fd857c656-ldlbb",
            "placeholder": "<POD_SUFFIX>",
            "position": 126
          },
          {
            "type": "k8s_pod_suffix",
            "original": "5bc54f8cd8-kzk2f",
            "placeholder": "<POD_SUFFIX>",
            "position": 211
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-<POD_SUFFIX> -<REPLICA_SUFFIX> --tail=200 || kubectl logs -n astronomy-shop fraud-detection-6586<POD_SUFFIX>ail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Attempt to retrieve current or previous logs for the fraud-detection pod to diagnose the crash loop.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-65868bcdb5-7gtsl --previous --tail=200 || kubectl logs -n astronomy-shop fraud-detection-65868bcdb5-7gtsl --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-7gtsl",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          },
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-7gtsl",
            "placeholder": "<POD_SUFFIX>",
            "position": 148
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 73
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop -l opentelemetry.io/name -o wide --show-labels\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "List labeled pods with details to quickly spot unhealthy components; reveals fraud-detection is in CrashLoopBackOff.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop -l opentelemetry.io/name -o wide --show-labels\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop -l opentelemetry.io/name=ad --tail=200 && echo '---' && kubectl logs -n astronomy-shop -l opentelemetry.io/name=cart --tail=200 && echo '---' && kubectl logs -n astronomy-shop -l opentelemetry.io/name=checkout --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Attempt to fetch logs for ad, cart, and checkout services by label to check their health.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop -l opentelemetry.io/name=ad --tail=200 && echo '---' && kubectl logs -n astronomy-shop -l opentelemetry.io/name=cart --tail=200 && echo '---' && kubectl logs -n astronomy-shop -l opentelemetry.io/name=checkout --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n astronomy-shop ad cart checkout -o wide && echo '---' && kubectl describe svc -n astronomy-shop ad && echo '---' && kubectl describe svc -n astronomy-shop cart && echo '---' && kubectl describe svc -n astronomy-shop checkout\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Verify that ad, cart, and checkout services have healthy endpoints and check their service configurations for issues.",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl get endpoints -n astronomy-shop ad cart checkout -o wide && echo '---' && kubectl describe svc -n astronomy-shop ad && echo '---' && kubectl describe svc -n astronomy-shop cart && echo '---' && kubectl describe svc -n astronomy-shop checkout\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n astronomy-shop -o wide\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "List services with details to correlate ClusterIP addresses mentioned in frontend errors with backend services.",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl get svc -n astronomy-shop -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop pod/frontend-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Fetch recent logs from the frontend pod to observe user-facing errors and identify dependent services/IPs showing connection issues.",
        "sequence_number": 12,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop pod/frontend-7d6b77c58-8bcrk --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7d6b77c58-8bcrk",
            "placeholder": "<POD_SUFFIX>",
            "position": 56
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List all pods in the astronomy-shop namespace to get an initial overview of component statuses and restarts.",
        "sequence_number": 13,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_ad_service_failure-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get networkpolicy -n astronomy-shop -o yaml\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Check for any NetworkPolicies that could block traffic between frontend and backend services.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get networkpolicy -n astronomy-shop -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop pod/frontend-<POD_SUFFIX> --tail=200 --since=10m\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Fetch recent logs from the specific frontend pod to corroborate connection failures and timing.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop pod/frontend-7d6b77c58-ch5lz --tail=200 --since=10m\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7d6b77c58-ch5lz",
            "placeholder": "<POD_SUFFIX>",
            "position": 56
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl exec -n astronomy-shop pod/frontend-<POD_SUFFIX> -- sh -c 'getent hosts ad cart; nc -vz ad 8080; nc -vz cart 8080; curl -sS http://ad:8080/ || true; curl -sS http://cart:8080/ || true'\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "From the frontend pod, test DNS resolution and TCP reachability to ad and cart services, and attempt HTTP requests to validate in-cluster connectivity.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl exec -n astronomy-shop pod/frontend-7d6b77c58-ch5lz -- sh -c 'getent hosts ad cart; nc -vz ad 8080; nc -vz cart 8080; curl -sS http://ad:8080/ || true; curl -sS http://cart:8080/ || true'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7d6b77c58-ch5lz",
            "placeholder": "<POD_SUFFIX>",
            "position": 56
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop pod/cart-<POD_SUFFIX> -c cart --tail=200 --since=10m\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Inspect the cart service container logs to validate normal operation or detect errors impacting connectivity.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop pod/cart-6fd857c656-vl8ns -c cart --tail=200 --since=10m\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "6fd857c656-vl8ns",
            "placeholder": "<POD_SUFFIX>",
            "position": 52
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop pod/ad-<POD_SUFFIX> -<REPLICA_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Check previous Ad service container logs to investigate recent restarts or prior failures.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop pod/ad-94bd576b5-xrjmj --previous --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-xrjmj",
            "placeholder": "<POD_SUFFIX>",
            "position": 50
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 64
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deployment/ad --tail=200 --since=10m; kubectl logs -n astronomy-shop deployment/cart --tail=200 --since=10m\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Initial attempt to get logs from ad and cart deployments to check for service-side errors.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deployment/ad --tail=200 --since=10m; kubectl logs -n astronomy-shop deployment/cart --tail=200 --since=10m\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop pod/ad-<POD_SUFFIX> --tail=200 --since=10m\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Inspect current Ad service pod logs for runtime errors or readiness issues.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop pod/ad-94bd576b5-xrjmj --tail=200 --since=10m\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-xrjmj",
            "placeholder": "<POD_SUFFIX>",
            "position": 50
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n astronomy-shop; kubectl describe svc ad -n astronomy-shop; kubectl describe svc cart -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Verify that ad and cart services have healthy endpoints and correct selectors/ports by inspecting Endpoints and service descriptions.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl get endpoints -n astronomy-shop; kubectl describe svc ad -n astronomy-shop; kubectl describe svc cart -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n astronomy-shop -o wide\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "List services with Cluster IPs to correlate error IPs from frontend logs with service names (ad, cart, etc.).",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl get svc -n astronomy-shop -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deployment/frontend --tail=200 --since=5m\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Fetch recent frontend deployment logs to observe client-side errors and identify target services (e.g., ECONNREFUSED with specific Cluster IPs).",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deployment/frontend --tail=200 --since=5m\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deployment/<POD_SUFFIX> --tail=200 --since=5m\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Check recent logs of the frontend-proxy (Envoy) to identify gateway issues impacting frontend requests.",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deployment/frontend-proxy --tail=200 --since=5m\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "frontend-proxy",
            "placeholder": "<POD_SUFFIX>",
            "position": 54
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List all pods and their statuses in the astronomy-shop namespace to get initial service health and restarts.",
        "sequence_number": 12,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_ad_service_failure-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the astronomy-shop namespace to identify non-running components",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n astronomy-shop && echo '--- describe bad pod' && kubectl describe pod -n astronomy-shop flagd-<POD_SUFFIX> || true && echo '--- logs of bad pod' && kubectl logs -n astronomy-shop flagd-7cd7<POD_SUFFIX>ll-containers=true --tail=200 || true && echo '--- load<REPLICA_SUFFIX> logs tail' && kubectl logs -n astronomy-shop deplo<REPLICA_SUFFIX>erator --tail=200 || true && echo '--- frontend logs tail' && kubectl logs -n astronomy-shop deploy/frontend --tail=200 || true && echo '--- checkout logs tail' && kubectl logs -n astronomy-shop deploy/checkout --tail=200 || true && echo '--- payment logs tail' && kubectl logs -n astronomy-shop deploy/payment --tail=200 || true\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Gather broad diagnostics: deployments, pod description/logs for suspected pod, and key service logs",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get deploy -n astronomy-shop && echo '--- describe bad pod' && kubectl describe pod -n astronomy-shop flagd-7cd7b5cbb8-6pr7j || true && echo '--- logs of bad pod' && kubectl logs -n astronomy-shop flagd-7cd7b5cbb8-6pr7j --all-containers=true --tail=200 || true && echo '--- load-generator logs tail' && kubectl logs -n astronomy-shop deploy/load-generator --tail=200 || true && echo '--- frontend logs tail' && kubectl logs -n astronomy-shop deploy/frontend --tail=200 || true && echo '--- checkout logs tail' && kubectl logs -n astronomy-shop deploy/checkout --tail=200 || true && echo '--- payment logs tail' && kubectl logs -n astronomy-shop deploy/payment --tail=200 || true\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7cd7b5cbb8-6pr7j",
            "placeholder": "<POD_SUFFIX>",
            "position": 128
          },
          {
            "type": "k8s_pod_suffix",
            "original": "7cd7b5cbb8-6pr7j",
            "placeholder": "<POD_SUFFIX>",
            "position": 223
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-generator",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 290
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-generator",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 357
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop && echo '--- recent events ---' && kubectl get events -n astronomy-shop --sort-by=.metadata.creationTimestamp | tail -n 25 && echo '--- load<REPLICA_SUFFIX> logs ---' && kubectl logs -n astronomy-shop deplo<REPLICA_SUFFIX>erator --tail=150 && echo '--- frontend logs ---' && kubectl logs -n astronomy-shop deploy/frontend --tail=150\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Correlate pod status with recent cluster events and client/frontend logs to surface errors and backoffs",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop && echo '--- recent events ---' && kubectl get events -n astronomy-shop --sort-by=.metadata.creationTimestamp | tail -n 25 && echo '--- load-generator logs ---' && kubectl logs -n astronomy-shop deploy/load-generator --tail=150 && echo '--- frontend logs ---' && kubectl logs -n astronomy-shop deploy/frontend --tail=150\")",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-generator",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 187
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-generator",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 253
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get svc -n astronomy-shop -o wide && echo '--- endpoints checkout ---' && kubectl get endpoints -n astronomy-shop checkout -o wide && echo '--- checkout svc describe ---' && kubectl describe svc -n astronomy-shop checkout && echo '--- checkout logs ---' && kubectl logs -n astronomy-shop deploy/checkout --tail=200 || true && echo '--- fraud<REPLICA_SUFFIX> logs ---' && kubectl logs -n astronomy-shop pod/fraud-detection-<POD_SUFFIX> --tail=200 || true && echo '---<REPLICA_SUFFIX>ection describe ---' && kubectl describe pod -n astronomy-shop fraud-detection-6586<POD_SUFFIX>true\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Inspect service and endpoint configuration alongside relevant pod logs/describes to pinpoint failing backend",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl get svc -n astronomy-shop -o wide && echo '--- endpoints checkout ---' && kubectl get endpoints -n astronomy-shop checkout -o wide && echo '--- checkout svc describe ---' && kubectl describe svc -n astronomy-shop checkout && echo '--- checkout logs ---' && kubectl logs -n astronomy-shop deploy/checkout --tail=200 || true && echo '--- fraud-detection logs ---' && kubectl logs -n astronomy-shop pod/fraud-detection-65868bcdb5-d5b89 --tail=200 || true && echo '--- fraud-detection describe ---' && kubectl describe pod -n astronomy-shop fraud-detection-65868bcdb5-d5b89 || true\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-d5b89",
            "placeholder": "<POD_SUFFIX>",
            "position": 436
          },
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-d5b89",
            "placeholder": "<POD_SUFFIX>",
            "position": 573
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 361
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 486
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get svc checkout -n astronomy-shop -o wide && kubectl get endpoints checkout -n astronomy-shop -o wide && kubectl describe deploy -n astronomy-shop checkout && kubectl logs -n astronomy-shop deploy/checkout --tail=200\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Deep-dive into checkout service/endpoints and deployment with logs to validate connectivity issues",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl get svc checkout -n astronomy-shop -o wide && kubectl get endpoints checkout -n astronomy-shop -o wide && kubectl describe deploy -n astronomy-shop checkout && kubectl logs -n astronomy-shop deploy/checkout --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n astronomy-shop -o wide && echo '--- endpoints ---' && kubectl get endpoints -n astronomy-shop -o wide && echo '--- checkout logs ---' && kubectl logs -n astronomy-shop deploy/checkout --tail=200 || true && echo '--- fraud<REPLICA_SUFFIX> describe ---' && kubectl describe pod -n astronomy-shop fraud-detection-<POD_SUFFIX> || true\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Validate service exposure and endpoints across namespace; corroborate with checkout logs and fraud-detection describe",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get svc -n astronomy-shop -o wide && echo '--- endpoints ---' && kubectl get endpoints -n astronomy-shop -o wide && echo '--- checkout logs ---' && kubectl logs -n astronomy-shop deploy/checkout --tail=200 || true && echo '--- fraud-detection describe ---' && kubectl describe pod -n astronomy-shop fraud-detection-65868bcdb5-d5b89 || true\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-d5b89",
            "placeholder": "<POD_SUFFIX>",
            "position": 335
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 252
          }
        ]
      },
      {
        "command": "submit(\"Yes\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit detection result confirming anomalies are present",
        "sequence_number": 7,
        "original_command": "submit(\"Yes\")"
      }
    ]
  },
  {
    "problem_id": "revoke_auth_mongodb-analysis-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation mongodb-geo-<POD_SUFFIX> -- cat /docker-entrypoint-initdb.d/k8s-geo-mongo.sh\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Read the MongoDB initialization script inside the DB pod to validate user creation and role grant logic.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation mongodb-geo-5ff578bcb8-vl428 -- cat /docker-entrypoint-initdb.d/k8s-geo-mongo.sh\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-vl428",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation geo -o yaml\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Retrieve the geo deployment manifest to verify command, image, env vars, and configuration impacting DB access.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation geo -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation pod/mongodb-geo-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Inspect MongoDB pod logs to confirm authentication/authorization behavior and errors during geo service access.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation pod/mongodb-geo-5ff578bcb8-vl428\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-vl428",
            "placeholder": "<POD_SUFFIX>",
            "position": 67
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation pod/geo-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Fetch current logs from the geo service to capture the exact error message indicating MongoDB authorization failure.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation pod/geo-84fbc958c7-vfm7w\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-vfm7w",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n test-hotel-reservation geo-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Describe the geo pod to review container state, events, and CrashLoopBackOff details.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl describe pod -n test-hotel-reservation geo-84fbc958c7-vfm7w\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-vfm7w",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation pod/geo-<POD_SUFFIX> -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Attempt to fetch previous logs from the geo pod for clues about recent crashes.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation pod/geo-84fbc958c7-vfm7w --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-vfm7w",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 73
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the namespace to identify failing components and their status.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      }
    ]
  },
  {
    "problem_id": "revoke_auth_mongodb-detection-2",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the namespace to identify failing components (rate pod in Error state).",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod rate-<POD_SUFFIX> -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Inspect pod details and events to confirm CrashLoopBackOff and gather context.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod rate-7bdc978679-xp5fm -n test-hotel-reservation\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7bdc978679-xp5fm",
            "placeholder": "<POD_SUFFIX>",
            "position": 38
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs rate-<POD_SUFFIX> -n test-hotel-reservation -c hotel-reserv-rate -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Fetch previous container logs to reveal root cause: MongoDB authorization error (not authorized on rate-db).",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs rate-7bdc978679-xp5fm -n test-hotel-reservation -c hotel-reserv-rate --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7bdc978679-xp5fm",
            "placeholder": "<POD_SUFFIX>",
            "position": 30
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 91
          }
        ]
      },
      {
        "command": "submit(\"Yes\")",
        "type": "execute_command",
        "importance_score": 9,
        "description": "Submit that an anomaly is detected based on the identified MongoDB authorization failure.",
        "sequence_number": 4,
        "original_command": "submit(\"Yes\")"
      }
    ]
  },
  {
    "problem_id": "auth_miss_mongodb-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the namespace to identify failing components and target pod(s).",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod url-shorten-mongodb-<POD_SUFFIX> -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Inspect the failing MongoDB pod for container state, restart reason, mounts, and events.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod url-shorten-mongodb-685c54f5f9-7x9h8 -n test-social-network\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "685c54f5f9-7x9h8",
            "placeholder": "<POD_SUFFIX>",
            "position": 53
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs url-shorten-mongodb-<POD_SUFFIX> -n test-social-network --tail=200 -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Attempt to fetch logs from the previous container instance to see the crash reason.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs url-shorten-mongodb-685c54f5f9-7x9h8 -n test-social-network --tail=200 --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "685c54f5f9-7x9h8",
            "placeholder": "<POD_SUFFIX>",
            "position": 45
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 93
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get configmap url-shorten-mongodb -n test-social-network -o yaml\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Retrieve mongod.conf ConfigMap to verify TLS settings and certificate file paths.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl get configmap url-shorten-mongodb -n test-social-network -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy,rs -n test-social-network | grep url-shorten-mongodb || true\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Check deployment and replica sets for the url-shorten-mongodb to understand current replicas and rollout state.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl get deploy,rs -n test-social-network | grep url-shorten-mongodb || true\")"
      },
      {
        "command": "exec_shell(\"kubectl get secret mongodb-tls -n test-social-network -o yaml\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Inspect the TLS secret referenced by MongoDB to assess certificate presence/metadata.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get secret mongodb-tls -n test-social-network -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get deployment url-shorten-mongodb -n test-social-network -o yaml\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Review deployment spec to confirm volume mounts and references to the TLS secret and ConfigMap.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get deployment url-shorten-mongodb -n test-social-network -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network -o wide | grep url-shorten-mongodb || true\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Filter pod list to the MongoDB pods to verify CrashLoopBackOff status and scheduling details.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network -o wide | grep url-shorten-mongodb || true\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network url-shorten-mongodb-<POD_SUFFIX> --tail=200 || true\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Fetch current pod logs; reveals the fatal error that the SSL certificate is expired or not yet valid, directly identifying the root cause.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network url-shorten-mongodb-685c54f5f9-7x9h8 --tail=200 || true\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "685c54f5f9-7x9h8",
            "placeholder": "<POD_SUFFIX>",
            "position": 68
          }
        ]
      }
    ]
  },
  {
    "problem_id": "user_unregistered_mongodb-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl describe deploy -n test-hotel-reservation mongodb-geo\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Describe the MongoDB deployment to verify --auth is enabled and initialization scripts/volumes, explaining auth behavior.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl describe deploy -n test-hotel-reservation mongodb-geo\")"
      },
      {
        "command": "exec_shell(\"kubectl describe deploy -n test-hotel-reservation geo\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Describe the geo deployment to review runtime configuration (command, env vars) that could affect DB authentication.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe deploy -n test-hotel-reservation geo\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "List pods with IPs to correlate MongoDB log connection attempts (e.g., 10.244.1.116) with the geo pod.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation mongodb-geo-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect MongoDB logs to confirm authentication configuration, user creation, and auth failures including the client IP and principal.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation mongodb-geo-5ff578bcb8-p5rmr\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-p5rmr",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Fetch logs from the failing geo pod to reveal the root error (SASL authentication failure against MongoDB).",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-84fbc958c7-f5vck\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-f5vck",
            "placeholder": "<POD_SUFFIX>",
            "position": 55
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the namespace to identify unhealthy components and their statuses.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      }
    ]
  },
  {
    "problem_id": "noop_detection_astronomy_shop-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "List all pods in the namespace to verify component status and readiness.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl get events -n astronomy-shop --sort-by=.lastTimestamp\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Inspect recent cluster events for scheduling, probe failures, or other anomalies.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get events -n astronomy-shop --sort-by=.lastTimestamp\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "List services and obtain the checkout service ClusterIP/port to correlate with connection errors.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get svc -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/frontend --tail=200\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Fetch frontend logs showing ECONNREFUSED to the checkout service IP, directly evidencing the connectivity anomaly.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/frontend --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n astronomy-shop checkout -o yaml\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Verify checkout service endpoints (pod IP and port) to confirm service backing endpoints are present.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl get endpoints -n astronomy-shop checkout -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n astronomy-shop checkout-<POD_SUFFIX> && kubectl logs -n astronomy-shop checkout-5bc5<POD_SUFFIX>checkout --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Describe the checkout pod and fetch its container logs to confirm application readiness and health.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl describe pod -n astronomy-shop checkout-5bc54f8cd8-xx7r8 && kubectl logs -n astronomy-shop checkout-5bc54f8cd8-xx7r8 -c checkout --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5bc54f8cd8-xx7r8",
            "placeholder": "<POD_SUFFIX>",
            "position": 60
          },
          {
            "type": "k8s_pod_suffix",
            "original": "5bc54f8cd8-xx7r8",
            "placeholder": "<POD_SUFFIX>",
            "position": 120
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Check deployment availability to ensure replicas are up and available.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get deploy -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/checkout --tail=200\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Attempt to fetch checkout deployment logs as an auxiliary check.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/checkout --tail=200\")"
      }
    ]
  },
  {
    "problem_id": "k8s_target_port-misconfig-detection-3",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List all pods in the namespace to verify component health and obtain the exact pod name for further inspection.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all services and their ports to identify the potentially misconfigured service.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Show actual service endpoints to detect port mismatch (post-storage-service endpoints exposing 9999).",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get endpoints -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl describe svc post-storage-service -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Detail the service configuration to confirm TargetPort is set to 9999, indicating a misconfiguration.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl describe svc post-storage-service -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod post-storage-service-<POD_SUFFIX> -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect the workload to verify the container listens on port 9090, confirming mismatch with service targetPort 9999.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl describe pod post-storage-service-9bd8bd979-4gv9l -n test-social-network\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "9bd8bd979-4gv9l",
            "placeholder": "<POD_SUFFIX>",
            "position": 54
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get configmap post-storage-service -n test-social-network -o yaml\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Review service-config to see expected port references (9090) for corroborating evidence.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get configmap post-storage-service -n test-social-network -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network post-storage-service-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Check application logs for symptoms stemming from the misconfiguration (connectivity errors).",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network post-storage-service-9bd8bd979-4gv9l --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "9bd8bd979-4gv9l",
            "placeholder": "<POD_SUFFIX>",
            "position": 69
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe svc compose-post-service -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Compare with a correctly configured service (9090 -> 9090) to validate expected targetPort behavior.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl describe svc compose-post-service -n test-social-network\")"
      }
    ]
  },
  {
    "problem_id": "auth_miss_mongodb-mitigation-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List pods in the namespace to identify failing components",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n test-social-network url-shorten-mongodb-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Inspect the failing MongoDB pod to review configuration, volumes, and events",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod -n test-social-network url-shorten-mongodb-54d9696567-hws2w\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "54d9696567-hws2w",
            "placeholder": "<POD_SUFFIX>",
            "position": 76
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network url-shorten-mongodb-<POD_SUFFIX> -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Fetch previous container logs to identify the root cause (expired/not yet valid SSL certificate)",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network url-shorten-mongodb-54d9696567-hws2w --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "54d9696567-hws2w",
            "placeholder": "<POD_SUFFIX>",
            "position": 68
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 82
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get configmap -n test-social-network url-shorten-mongodb -o yaml\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Check mongod.conf ConfigMap to see TLS is required and certificateKeyFile is set",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl get configmap -n test-social-network url-shorten-mongodb -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get secret -n test-social-network mongodb-tls -o jsonpath='{.data.tls\\\\.pem}' | base64 -d | awk '/BEGIN CERTIFICATE/{flag=1} flag; /END CERTIFICATE/{exit}' | openssl x509 -noout -dates -subject -issuer\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Decode and inspect the TLS certificate to confirm it is expired",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl get secret -n test-social-network mongodb-tls -o jsonpath='{.data.tls\\\\.pem}' | base64 -d | awk '/BEGIN CERTIFICATE/{flag=1} flag; /END CERTIFICATE/{exit}' | openssl x509 -noout -dates -subject -issuer\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n test-social-network media-mongodb-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Compare with a healthy MongoDB pod to gather context",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl describe pod -n test-social-network media-mongodb-6d47ccb779-8zhbx\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "6d47ccb779-8zhbx",
            "placeholder": "<POD_SUFFIX>",
            "position": 70
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get configmap -n test-social-network media-mongodb -o yaml\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Confirm the healthy MongoDB instance has TLS disabled, informing mitigation approach",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get configmap -n test-social-network media-mongodb -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl patch configmap -n test-social-network url-shorten-mongodb --type='json' -p='[{\\\"op\\\":\\\"replace\\\",\\\"path\\\":\\\"/data/mongod.conf\\\",\\\"value\\\":\\\"net:\\\\n  tls:\\\\n    mode: disabled\\\\n\\\"}]'\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Patch the ConfigMap to disable TLS in mongod.conf, mitigating the expired certificate issue",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl patch configmap -n test-social-network url-shorten-mongodb --type='json' -p='[{\\\"op\\\":\\\"replace\\\",\\\"path\\\":\\\"/data/mongod.conf\\\",\\\"value\\\":\\\"net:\\\\n  tls:\\\\n    mode: disabled\\\\n\\\"}]'\")"
      },
      {
        "command": "exec_shell(\"kubectl delete pod -n test-social-network url-shorten-mongodb-<POD_SUFFIX>\")",
        "type": "execute_command",
        "importance_score": 9,
        "description": "Delete the pod to force it to restart and pick up the updated ConfigMap",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl delete pod -n test-social-network url-shorten-mongodb-54d9696567-hws2w\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "54d9696567-hws2w",
            "placeholder": "<POD_SUFFIX>",
            "position": 74
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network -o wide\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Verify the new MongoDB pod comes up healthy after the mitigation",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network -o wide\")"
      }
    ]
  },
  {
    "problem_id": "assign_to_non_existent_node_social_net-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Lists all pods in the namespace to identify the pending pod requiring investigation.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod user-service-<POD_SUFFIX> -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspects the pending pod to reveal scheduling failure due to node selector/taint mismatch (assigned to non-existent or unsuitable node).",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod user-service-5b549cc8dc-48fjt -n test-social-network\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5b549cc8dc-48fjt",
            "placeholder": "<POD_SUFFIX>",
            "position": 46
          }
        ]
      },
      {
        "command": "submit([\"user-service\"])",
        "type": "execute_command",
        "importance_score": 8,
        "description": "Submits the identified faulty component based on the diagnosis.",
        "sequence_number": 3,
        "original_command": "submit([\"user-service\"])"
      }
    ]
  },
  {
    "problem_id": "k8s_target_port-misconfig-analysis-3",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "List all pods in the namespace to verify workloads are running.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List services and exposed ports to identify relevant service configuration.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deploy/compose-post-service --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Inspect client errors showing connection refused to post-storage-service on port 9090.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deploy/compose-post-service --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deploy/post-storage-service --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Check server logs for post-storage-service to confirm it started and general health.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deploy/post-storage-service --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl describe deploy/post-storage-service -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Describe deployment to verify the container's declared port (9090).",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl describe deploy/post-storage-service -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints post-storage-service -n test-social-network -o wide\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Check service endpoints to see backend port used by the service (9999), indicating a mismatch.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get endpoints post-storage-service -n test-social-network -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl describe svc post-storage-service -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Describe service to confirm TargetPort is set to 9999 while container exposes 9090, identifying the misconfiguration.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl describe svc post-storage-service -n test-social-network\")"
      },
      {
        "command": "submit({\"system_level\": \"Application\", \"fault_type\": \"Misconfiguration\"})",
        "type": "execute_command",
        "importance_score": 9,
        "description": "Submit final diagnosis indicating an application-level service targetPort misconfiguration.",
        "sequence_number": 8,
        "original_command": "submit({\"system_level\": \"Application\", \"fault_type\": \"Misconfiguration\"})"
      }
    ]
  },
  {
    "problem_id": "user_unregistered_mongodb-mitigation-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/geo --tail=100\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Validate that geo service authentication succeeds post-mitigation.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/geo --tail=100\")"
      },
      {
        "command": "exec_shell(\"kubectl -n test-hotel-reservation exec mongodb-geo-<POD_SUFFIX> -- sh -lc 'mongo admin -u root -p root --authenticationDatabase admin --quiet --eval \\\"db.getUser(\\\\\\\"admin\\\\\\\") ? \\\\\\\"exists\\\\\\\" : \\\\\\\"missing\\\\\\\"\\\"'\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Quick existence check for the admin user in MongoDB after mitigation.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl -n test-hotel-reservation exec mongodb-geo-5ff578bcb8-h8mzk -- sh -lc 'mongo admin -u root -p root --authenticationDatabase admin --quiet --eval \\\"db.getUser(\\\\\\\"admin\\\\\\\") ? \\\\\\\"exists\\\\\\\" : \\\\\\\"missing\\\\\\\"\\\"'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-h8mzk",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl -n test-hotel-reservation exec mongodb-geo-<POD_SUFFIX> -- bash -lc 'mongo admin -u root -p root --authenticationDatabase admin --quiet --eval \\\"printjson(db.getUser(\\\\\\\"admin\\\\\\\"))\\\"'\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Verify admin user presence and details directly in MongoDB.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl -n test-hotel-reservation exec mongodb-geo-5ff578bcb8-h8mzk -- bash -lc 'mongo admin -u root -p root --authenticationDatabase admin --quiet --eval \\\"printjson(db.getUser(\\\\\\\"admin\\\\\\\"))\\\"'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-h8mzk",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl -n test-hotel-reservation exec mongodb-geo-<POD_SUFFIX> -- bash -lc \\'mongo admin -u root -p root --authenticationDatabase admin --quiet --eval \\\\\\\"printjson(db.getUser(\\\\\\\\\\\\\"admin\\\\\\\\\\\\\"))\\\\\"\\'\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Verify that the admin user exists in MongoDB after remediation",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl -n test-hotel-reservation exec mongodb-geo-5ff578bcb8-h8mzk -- bash -lc \\'mongo admin -u root -p root --authenticationDatabase admin --quiet --eval \\\\\\\"printjson(db.getUser(\\\\\\\\\\\\\"admin\\\\\\\\\\\\\"))\\\\\"\\'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-h8mzk",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl -n test-hotel-reservation exec mongodb-geo-<POD_SUFFIX> -c hotel-reserv-geo-mongo -- bash -lc 'bash /scripts/remove-miti<POD_SUFFIX>-mongo.sh 2>&1 || true'\")",
        "type": "execute_command",
        "importance_score": 9,
        "description": "Ensure mitigation script runs in the correct MongoDB container and capture output for troubleshooting.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl -n test-hotel-reservation exec mongodb-geo-5ff578bcb8-h8mzk -c hotel-reserv-geo-mongo -- bash -lc 'bash /scripts/remove-mitigate-admin-geo-mongo.sh 2>&1 || true'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-h8mzk",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          },
          {
            "type": "k8s_pod_suffix",
            "original": "mitigate-admin",
            "placeholder": "<POD_SUFFIX>",
            "position": 140
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl -n test-hotel-reservation exec mongodb-geo-<POD_SUFFIX> -c hotel-reserv-geo-mongo -- bash -lc \\'bash /scripts/remove-miti<POD_SUFFIX>-mongo.sh 2>&1 || true\\'\")",
        "type": "execute_command",
        "importance_score": 9,
        "description": "Run remediation script targeting the MongoDB container explicitly to ensure execution",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl -n test-hotel-reservation exec mongodb-geo-5ff578bcb8-h8mzk -c hotel-reserv-geo-mongo -- bash -lc \\'bash /scripts/remove-mitigate-admin-geo-mongo.sh 2>&1 || true\\'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-h8mzk",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          },
          {
            "type": "k8s_pod_suffix",
            "original": "mitigate-admin",
            "placeholder": "<POD_SUFFIX>",
            "position": 141
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl -n test-hotel-reservation exec mongodb-geo-<POD_SUFFIX> -- bash -lc \\'bash /scripts/remove-miti<POD_SUFFIX>-mongo.sh\\'\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Run remediation script inside MongoDB pod to recreate admin user and grant roles",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl -n test-hotel-reservation exec mongodb-geo-5ff578bcb8-h8mzk -- bash -lc \\'bash /scripts/remove-mitigate-admin-geo-mongo.sh\\'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-h8mzk",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          },
          {
            "type": "k8s_pod_suffix",
            "original": "mitigate-admin",
            "placeholder": "<POD_SUFFIX>",
            "position": 115
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl -n test-hotel-reservation exec mongodb-geo-<POD_SUFFIX> -- bash -lc 'bash /scripts/remove-miti<POD_SUFFIX>-mongo.sh'\")",
        "type": "execute_command",
        "importance_score": 9,
        "description": "Run mitigation script in MongoDB pod to fix admin user and restore readWrite permissions.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl -n test-hotel-reservation exec mongodb-geo-5ff578bcb8-h8mzk -- bash -lc 'bash /scripts/remove-mitigate-admin-geo-mongo.sh'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-h8mzk",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          },
          {
            "type": "k8s_pod_suffix",
            "original": "mitigate-admin",
            "placeholder": "<POD_SUFFIX>",
            "position": 114
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl -n test-hotel-reservation exec mongodb-geo-<POD_SUFFIX> -- bash -c \\\"bash /scripts/remove-miti<POD_SUFFIX>-mongo.sh\\\"\")",
        "type": "execute_command",
        "importance_score": 7,
        "description": "Attempt to run mitigation script in MongoDB pod to recreate admin user and grant roles (initial attempt with quoting).",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl -n test-hotel-reservation exec mongodb-geo-5ff578bcb8-h8mzk -- bash -c \\\"bash /scripts/remove-mitigate-admin-geo-mongo.sh\\\"\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-h8mzk",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          },
          {
            "type": "k8s_pod_suffix",
            "original": "mitigate-admin",
            "placeholder": "<POD_SUFFIX>",
            "position": 114
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl -n test-hotel-reservation get configmap failure-admin-geo -o yaml\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Retrieve mitigation scripts for repairing admin user/roles on MongoDB.",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl -n test-hotel-reservation get configmap failure-admin-geo -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl -n test-hotel-reservation logs deploy/mongodb-geo --tail=200\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Examine MongoDB logs to trace user creation and subsequent auth errors.",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl -n test-hotel-reservation logs deploy/mongodb-geo --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl -n test-hotel-reservation get configmap mongo-geo-script -o yaml\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Check initial MongoDB setup script to understand user/role initialization.",
        "sequence_number": 12,
        "original_command": "exec_shell(\"kubectl -n test-hotel-reservation get configmap mongo-geo-script -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl -n test-hotel-reservation get deploy mongodb-geo -o yaml\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Review MongoDB (geo) deployment configuration, volumes, and init scripts.",
        "sequence_number": 13,
        "original_command": "exec_shell(\"kubectl -n test-hotel-reservation get deploy mongodb-geo -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl -n test-hotel-reservation get deploy geo -o yaml\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Review geo deployment configuration for environment and command details",
        "sequence_number": 14,
        "original_command": "exec_shell(\"kubectl -n test-hotel-reservation get deploy geo -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-<POD_SUFFIX> --all-containers=true --tail=200\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect geo service logs to confirm MongoDB authentication failures.",
        "sequence_number": 15,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-84fbc958c7-rkf9g --all-containers=true --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-rkf9g",
            "placeholder": "<POD_SUFFIX>",
            "position": 55
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List pods in the namespace to identify failing components (geo pod failing).",
        "sequence_number": 16,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      }
    ]
  },
  {
    "problem_id": "network_delay_hotel_res-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get svc,endpoints -n test-hotel-reservation | sed -n '1p;/mongodb-profile/p;/profile/p;/mongodb-user/p;/user/p'\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Consolidated services and endpoints view for related components; confirms user endpoints remain empty while DB endpoints exist.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get svc,endpoints -n test-hotel-reservation | sed -n '1p;/mongodb-profile/p;/profile/p;/mongodb-user/p;/user/p'\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation profile-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Confirm the profile service successfully connects to its DB as a baseline comparison.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation profile-8b6dd7c6c-rw78q --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "8b6dd7c6c-rw78q",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get deploy profile -n test-hotel-reservation -o yaml\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Check a healthy peer service's deployment for comparison of patterns and env.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get deploy profile -n test-hotel-reservation -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation mongodb-user-<POD_SUFFIX> -- mongo --host mongodb-user --port 27017 --eval 'db.runCommand({ ping: 1 })' --quiet\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Run a MongoDB ping via the Service DNS to confirm the database is reachable within the cluster.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation mongodb-user-969c6c449-xlsvg -- mongo --host mongodb-user --port 27017 --eval 'db.runCommand({ ping: 1 })' --quiet\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "969c6c449-xlsvg",
            "placeholder": "<POD_SUFFIX>",
            "position": 64
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation profile-<POD_SUFFIX> -- sh -c 'apk add --no-cache busybox-extras >/dev/null 2>&1 || true; nc -vz -w 2 mongodb-user 27017 || (echo trying_busybox_telnet && telnet mongodb-user 27017 </dev/null | head -n1 || true)'\")",
        "type": "execute_command",
        "importance_score": 7,
        "description": "Attempt in-pod network connectivity test from profile service to mongodb-user:27017 using nc/telnet (installs tools if missing).",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation profile-8b6dd7c6c-rw78q -- sh -c 'apk add --no-cache busybox-extras >/dev/null 2>&1 || true; nc -vz -w 2 mongodb-user 27017 || (echo trying_busybox_telnet && telnet mongodb-user 27017 </dev/null | head -n1 || true)'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "8b6dd7c6c-rw78q",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get networkpolicy -n test-hotel-reservation -o yaml\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Check for NetworkPolicies that might restrict traffic between services; none found indicates no policy-based blocking.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get networkpolicy -n test-hotel-reservation -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get pod -n test-hotel-reservation -o wide | sed -n '1p;/mongodb-user/p;/user-/p'\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Show pod IPs and node placements for mongodb-user and user pods to aid network path analysis.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get pod -n test-hotel-reservation -o wide | sed -n '1p;/mongodb-user/p;/user-/p'\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n test-hotel-reservation user-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Describe the user pod to view status, restart reasons, and recent events (CrashLoopBackOff).",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl describe pod -n test-hotel-reservation user-66d5d6f874-7n9xl\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "66d5d6f874-7n9xl",
            "placeholder": "<POD_SUFFIX>",
            "position": 64
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get svc mongodb-user -n test-hotel-reservation -o yaml\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Validate the mongodb-user Service configuration, ports, and selector mapping.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl get svc mongodb-user -n test-hotel-reservation -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy mongodb-user -n test-hotel-reservation -o yaml\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Review MongoDB user deployment configuration to ensure proper setup and hostname.",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl get deploy mongodb-user -n test-hotel-reservation -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy user -n test-hotel-reservation -o yaml\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Examine the user deployment configuration for image, command, and environment details.",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl get deploy user -n test-hotel-reservation -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation user-<POD_SUFFIX> --tail=200 --since=2m\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Retrieve the most recent logs from the user pod to confirm recurring connection failures.",
        "sequence_number": 12,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation user-66d5d6f874-7n9xl --tail=200 --since=2m\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "66d5d6f874-7n9xl",
            "placeholder": "<POD_SUFFIX>",
            "position": 56
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation mongodb-user-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Inspect MongoDB user database pod logs to verify it is running and accepting connections.",
        "sequence_number": 13,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation mongodb-user-969c6c449-xlsvg --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "969c6c449-xlsvg",
            "placeholder": "<POD_SUFFIX>",
            "position": 64
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get svc,endpoints -n test-hotel-reservation | sed -n '1p;/mongodb-user/p;/user/p'\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Check Services and Endpoints for mongodb-user and user to verify service discovery and endpoint readiness.",
        "sequence_number": 14,
        "original_command": "exec_shell(\"kubectl get svc,endpoints -n test-hotel-reservation | sed -n '1p;/mongodb-user/p;/user/p'\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation user-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Fetch recent logs from the user service pod to identify failure symptoms (e.g., no reachable servers).",
        "sequence_number": 15,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation user-66d5d6f874-7n9xl --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "66d5d6f874-7n9xl",
            "placeholder": "<POD_SUFFIX>",
            "position": 56
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the namespace to determine overall service health and identify failing components.",
        "sequence_number": 16,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      }
    ]
  },
  {
    "problem_id": "revoke_auth_mongodb-analysis-2",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation deploy/mongodb-rate -- cat /docker-entrypoint-initdb.d/k8s-rate-mongo.sh\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Examine the MongoDB initialization script to verify user creation and role grants that should permit the rate service to access rate-db.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation deploy/mongodb-rate -- cat /docker-entrypoint-initdb.d/k8s-rate-mongo.sh\")"
      },
      {
        "command": "exec_shell(\"kubectl describe deployment -n test-hotel-reservation rate\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Describe the rate deployment to check container image, command, environment, and rollout status for potential misconfigurations.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe deployment -n test-hotel-reservation rate\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Get detailed pod information (IPs, nodes) to correlate client IPs in MongoDB logs with the rate service pod and confirm CrashLoopBackOff.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation mongodb-rate-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Review MongoDB pod logs to verify auth settings and observe authentication/authorization events related to the rate service.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation mongodb-rate-56cc8659c9-xqjxm --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "56cc8659c9-xqjxm",
            "placeholder": "<POD_SUFFIX>",
            "position": 64
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation rate-<POD_SUFFIX> --tail=200 -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect previous logs of the failing rate pod to capture the crash reason (authorization error against MongoDB).",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation rate-7bdc978679-6dvtd --tail=200 --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7bdc978679-6dvtd",
            "placeholder": "<POD_SUFFIX>",
            "position": 56
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 81
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the namespace to identify failing components and overall cluster state.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      }
    ]
  },
  {
    "problem_id": "k8s_target_port-misconfig-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "List all pods in the namespace to verify workloads are running.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network -o wide\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all services and their ports to identify advertised service ports.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "List deployments to confirm availability status of components.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get deploy -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n test-social-network -o wide\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Show service endpoints and resolved backend ports; reveals user-service endpoints using port 9999.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl get endpoints -n test-social-network -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl logs deploy/user-service -n test-social-network --tail=200\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Check user-service logs for startup status or errors.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs deploy/user-service -n test-social-network --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc user-service -n test-social-network -o yaml && echo '---' && kubectl get deploy user-service -n test-social-network -o yaml\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Fetch detailed YAML for the user-service Service and Deployment to compare service targetPort (9999) with containerPort (9090), exposing the misconfiguration.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get svc user-service -n test-social-network -o yaml && echo '---' && kubectl get deploy user-service -n test-social-network -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get configmap user-service -n test-social-network -o yaml\")",
        "type": "probe_command",
        "importance_score": 1,
        "description": "Retrieve user-service ConfigMap; auxiliary config review not directly related to port issue.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get configmap user-service -n test-social-network -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl exec deploy/user-service -n test-social-network -- sh -c 'ss -ltnp || netstat -tulnp'\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Attempt to check listening ports inside the container; fails but indicates intent to verify runtime ports.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl exec deploy/user-service -n test-social-network -- sh -c 'ss -ltnp || netstat -tulnp'\")"
      },
      {
        "command": "exec_shell(\"kubectl exec deploy/user-service -n test-social-network -- sh -c 'cat /proc/net/tcp | grep -E \\\":2382|:270F\\\" || true'\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect /proc/net/tcp to verify actual listening port (9090 -> :2382) and absence of 9999 (:270F), confirming targetPort mismatch.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl exec deploy/user-service -n test-social-network -- sh -c 'cat /proc/net/tcp | grep -E \\\":2382|:270F\\\" || true'\")"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_ad_service_manual_gc-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the astronomy-shop namespace to identify failing components.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod ad-<POD_SUFFIX> -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Describe the ad pod to inspect detailed status and events, revealing OOMKilled restarts.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod ad-94bd576b5-phvwg -n astronomy-shop\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-phvwg",
            "placeholder": "<POD_SUFFIX>",
            "position": 36
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop ad-<POD_SUFFIX> -c ad -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Fetch previous container logs for the ad container to corroborate the failure context.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop ad-94bd576b5-phvwg -c ad --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-phvwg",
            "placeholder": "<POD_SUFFIX>",
            "position": 46
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 66
          }
        ]
      },
      {
        "command": "submit(\"Yes\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the anomaly detection result indicating issues were found.",
        "sequence_number": 4,
        "original_command": "submit(\"Yes\")"
      }
    ]
  },
  {
    "problem_id": "misconfig_app_hotel_res-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the namespace to identify components with errors; flags the geo pod in Error state.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Fetch logs from the geo pod; reveals DB URL mongodb-geo:27777 and 'no reachable servers' panic, indicating misconfiguration.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-c47ff745-7mhg5\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "c47ff745-7mhg5",
            "placeholder": "<POD_SUFFIX>",
            "position": 55
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "List services and ports; confirms mongodb-geo service exposes port 27017, validating the port mismatch with 27777 seen in logs.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get svc -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n test-hotel-reservation geo-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Describe the geo pod to review events, restart behavior, and container details supporting the diagnosis.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl describe pod -n test-hotel-reservation geo-c47ff745-7mhg5\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "c47ff745-7mhg5",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation geo -o yaml\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Inspect the geo deployment configuration to verify image, command, and environment; helps confirm configuration context.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation geo -o yaml\")"
      },
      {
        "command": "submit(\"Yes\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the anomaly detection result indicating misconfiguration was found.",
        "sequence_number": 6,
        "original_command": "submit(\"Yes\")"
      }
    ]
  },
  {
    "problem_id": "k8s_target_port-misconfig-localization-3",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List all pods in the namespace to confirm component readiness and identify targets for deeper inspection",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network -o wide\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List services and their ports to spot potential service port/targetPort issues",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deploy/nginx-thrift --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Check frontend gateway logs for request errors indicating downstream connection problems",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deploy/nginx-thrift --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network -o name | xargs -I {} sh -lc 'echo === {}; kubectl logs -n test-social-network {} --tail=400 --all<REPLICA_SUFFIX> | egrep -i \\\"error|exception|fail|panic|refused|timeout\\\" || true'\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Aggregate recent error logs across all pods to pinpoint failing interactions and implicated services",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network -o name | xargs -I {} sh -lc 'echo === {}; kubectl logs -n test-social-network {} --tail=400 --all-containers | egrep -i \\\"error|exception|fail|panic|refused|timeout\\\" || true'\")",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-containers",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 150
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n test-social-network post-storage-service -o yaml\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect the endpoints of post-storage-service to verify the discovered backend port wiring",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl get endpoints -n test-social-network post-storage-service -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl describe svc -n test-social-network post-storage-service && kubectl describe pod -n test-social-network post-storage-service-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Correlate service TargetPort (9999) with pod container port (9090) to confirm targetPort misconfiguration root cause",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl describe svc -n test-social-network post-storage-service && kubectl describe pod -n test-social-network post-storage-service-9bd8bd979-lrfz5\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "9bd8bd979-lrfz5",
            "placeholder": "<POD_SUFFIX>",
            "position": 145
          }
        ]
      },
      {
        "command": "submit([\"post-storage-service\"])",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the identified faulty component to complete the localization task",
        "sequence_number": 7,
        "original_command": "submit([\"post-storage-service\"])"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_ad_service_high_cpu-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "List all pods in the astronomy-shop namespace to spot unhealthy components and restart counts.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/ad --tail=200 -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Fetch previous logs for the ad deployment to inspect reasons for recent crashes.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/ad --tail=200 --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 65
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/ad --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Fetch current logs for the ad deployment to assess its present behavior.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/ad --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n astronomy-shop ad-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Describe the ad pod to confirm CrashLoopBackOff state and exit code details.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl describe pod -n astronomy-shop ad-94bd576b5-n6zc9\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-n6zc9",
            "placeholder": "<POD_SUFFIX>",
            "position": 54
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/frontend --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Check frontend logs for downstream errors indicating inability to reach the ad service.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/frontend --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n astronomy-shop -o wide\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List services with ClusterIP to correlate frontend connection errors with the ad service endpoint.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get svc -n astronomy-shop -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/fraud<REPLICA_SUFFIX> --tail<REPLICA_SUFFIX>evious\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Attempt to fetch previous logs for the fraud-detection deployment to check for crash indicators.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/fraud-detection --tail=200 --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 55
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 78
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop pod/fraud-detection-<POD_SUFFIX> -c fraud<REPLICA_SUFFIX> --tail<REPLICA_SUFFIX>evious\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Fetch previous container logs for the specific fraud-detection pod to look for failure context.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop pod/fraud-detection-65868bcdb5-m8c9q -c fraud-detection --tail=200 --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-m8c9q",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 84
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 107
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n astronomy-shop fraud-detection-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Describe the fraud-detection pod to verify CrashLoopBackOff and exit code details.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl describe pod -n astronomy-shop fraud-detection-65868bcdb5-m8c9q\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-m8c9q",
            "placeholder": "<POD_SUFFIX>",
            "position": 67
          }
        ]
      },
      {
        "command": "submit([\"ad\", \"fraud<REPLICA_SUFFIX>\"])",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the identified faulty components as the root cause.",
        "sequence_number": 10,
        "original_command": "submit([\"ad\", \"fraud-detection\"])",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 20
          }
        ]
      }
    ]
  },
  {
    "problem_id": "scale_pod_zero_social_net-analysis-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the test-social-network namespace to assess running workloads and identify missing components.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network -o wide\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "List services in the namespace with details to verify service endpoints and exposure.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n test-social-network -o wide\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "List deployments with status to detect that user-service has 0 replicas available.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get deploy -n test-social-network -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy user-service -n test-social-network -o yaml\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect the user-service deployment manifest to confirm spec.replicas is set to 0 (scaled to zero).",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl get deploy user-service -n test-social-network -o yaml\")"
      },
      {
        "command": "submit({\"system_level\": \"Application\", \"fault_type\": \"Misconfiguration\"})",
        "type": "execute_command",
        "importance_score": 9,
        "description": "Submit the analysis classification for the detected issue.",
        "sequence_number": 5,
        "original_command": "submit({\"system_level\": \"Application\", \"fault_type\": \"Misconfiguration\"})"
      }
    ]
  },
  {
    "problem_id": "k8s_target_port-misconfig-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "List all pods in the namespace to verify components are running.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List all services and their ports to identify candidates for connectivity issues.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl logs deploy/nginx-thrift -n test-social-network --tail=200\")",
        "type": "probe_command",
        "importance_score": 1,
        "description": "Check frontend logs for any surface errors related to downstream connectivity.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs deploy/nginx-thrift -n test-social-network --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs deploy/user-service -n test-social-network --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Inspect user-service logs to confirm the service starts without obvious runtime errors.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs deploy/user-service -n test-social-network --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs deploy/compose-post-service -n test-social-network --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Inspect compose-post-service logs showing connection refused to user-service:9090, indicating a potential port mismatch.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs deploy/compose-post-service -n test-social-network --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints user-service -n test-social-network -o wide\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Check user-service Endpoints to see the actual backend port exposed (shows 10.244.1.56:9999), revealing a mismatch.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get endpoints user-service -n test-social-network -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl describe deploy/user-service -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Describe user-service deployment to verify the container's declared port (9090), supporting the mismatch diagnosis.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl describe deploy/user-service -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc user-service -n test-social-network -o yaml\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Retrieve user-service Service YAML confirming misconfigured targetPort: 9999.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl get svc user-service -n test-social-network -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network -o jsonpath='{range .items[*]}{.metadata.name}{\\\"\\\\t\\\"}{range .spec.ports[*]}{.port}{\\\"->\\\"}{.targetPort}{\\\"\\\\t\\\"}{end}{\\\"\\\\n\\\"}{end}'\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Cross-check all services' port to targetPort mappings; confirms only user-service maps 9090->9999.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network -o jsonpath='{range .items[*]}{.metadata.name}{\\\"\\\\t\\\"}{range .spec.ports[*]}{.port}{\\\"->\\\"}{.targetPort}{\\\"\\\\t\\\"}{end}{\\\"\\\\n\\\"}{end}'\")"
      },
      {
        "command": "submit([\"user-service\"])",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the identified faulty component (user-service) due to Service targetPort misconfiguration.",
        "sequence_number": 10,
        "original_command": "submit([\"user-service\"])"
      }
    ]
  },
  {
    "problem_id": "assign_to_non_existent_node_social_net-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the test-social-network namespace to identify any pods not running (e.g., Pending).",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod user-service-<POD_SUFFIX> -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Inspect the Pending pod to find scheduling details, revealing the node selector set to a non-existent node and the FailedScheduling events.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod user-service-5b549cc8dc-pz8ll -n test-social-network\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5b549cc8dc-pz8ll",
            "placeholder": "<POD_SUFFIX>",
            "position": 46
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get nodes --show-labels\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "List cluster nodes and their labels to confirm that no node matches the specified node selector label (kubernetes.io/hostname=extra-node).",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get nodes --show-labels\")"
      }
    ]
  },
  {
    "problem_id": "assign_to_non_existent_node_social_net-analysis-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Lists all pods in the test-social-network namespace to identify any pods not running (e.g., Pending).",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod user-service-<POD_SUFFIX> -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Describes the Pending pod to view scheduling conditions, events, and nodeSelector causing scheduling failure.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod user-service-5b549cc8dc-k97sh -n test-social-network\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5b549cc8dc-k97sh",
            "placeholder": "<POD_SUFFIX>",
            "position": 46
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get nodes -o wide\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Lists available nodes and roles to verify that the target node specified by the selector does not exist and to check taints.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get nodes -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy user-service -n test-social-network -o yaml\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Retrieves the Deployment spec to confirm the nodeSelector forcing scheduling to a non-existent node (kubernetes.io/hostname=extra-node).",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl get deploy user-service -n test-social-network -o yaml\")"
      }
    ]
  },
  {
    "problem_id": "user_unregistered_mongodb-localization-2",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the test-hotel-reservation namespace to identify failing components.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation pod/rate-<POD_SUFFIX> -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Attempt to fetch previous logs of the crashing rate pod to investigate the cause of restarts.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation pod/rate-7bdc978679-95g2q --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7bdc978679-95g2q",
            "placeholder": "<POD_SUFFIX>",
            "position": 60
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 74
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n test-hotel-reservation rate-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Inspect detailed pod status and events for the rate pod to confirm CrashLoopBackOff and recent failures.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl describe pod -n test-hotel-reservation rate-7bdc978679-95g2q\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7bdc978679-95g2q",
            "placeholder": "<POD_SUFFIX>",
            "position": 64
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation rate-<POD_SUFFIX> hotel-reserv-rate\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Retrieve current container logs from the rate pod, revealing MongoDB SASL authentication failures.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation rate-7bdc978679-95g2q hotel-reserv-rate\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7bdc978679-95g2q",
            "placeholder": "<POD_SUFFIX>",
            "position": 56
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation pod/mongodb-rate-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Check MongoDB rate database logs to verify auth configuration and observe authentication attempts/failures from the rate service.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation pod/mongodb-rate-56cc8659c9-kc5lj\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "56cc8659c9-kc5lj",
            "placeholder": "<POD_SUFFIX>",
            "position": 68
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation rate -o yaml\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Fetch the rate deployment spec to validate environment configuration and confirm missing DB auth credentials.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation rate -o yaml\")"
      },
      {
        "command": "submit([\"rate\"])",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the identified faulty component (rate) as the root cause.",
        "sequence_number": 7,
        "original_command": "submit([\"rate\"])"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_product_catalog_service_failure-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List all pods in the astronomy-shop namespace to verify component readiness and spot anomalies.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deployment/load<REPLICA_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Review load generator logs to detect user-facing errors and service availability issues.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deployment/load-generator --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-generator",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 58
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deployment/<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Inspect frontend-proxy (Envoy) logs for HTTP/gateway-level issues impacting the frontend.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deployment/frontend-proxy --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "frontend-proxy",
            "placeholder": "<POD_SUFFIX>",
            "position": 54
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deployment/frontend --tail=200\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Check frontend logs; clearly shows 'Product Catalog Fail Feature Flag Enabled', indicating downstream product-catalog fault via feature flag.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deployment/frontend --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deployment/product-catalog --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Validate product-catalog service behavior; confirms it is running normally aside from feature flag influence.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deployment/product-catalog --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deployment/flagd -c flagd --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Verify flagd core logs to ensure the flag service is operating and reading its config file.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deployment/flagd -c flagd --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get configmaps -n astronomy-shop -o wide\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List ConfigMaps to locate the feature flag configuration (flagd-config).",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get configmaps -n astronomy-shop -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get configmap flagd-config -n astronomy-shop -o yaml\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Retrieve flagd-config content; confirms 'productCatalogFailure' flag is ENABLED with defaultVariant 'on', directly explaining the failure.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl get configmap flagd-config -n astronomy-shop -o yaml\")"
      },
      {
        "command": "submit([\"product-catalog\"])",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the localized faulty component based on evidence from frontend logs and flag configuration.",
        "sequence_number": 9,
        "original_command": "submit([\"product-catalog\"])"
      }
    ]
  },
  {
    "problem_id": "user_unregistered_mongodb-analysis-2",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation profile -o yaml\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Compare with a healthy service deployment for baseline configuration",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation profile -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get configmap -n test-hotel-reservation mongo-rate-script -o yaml\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Review the MongoDB init script to validate intended creation of admin/root users and roles",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get configmap -n test-hotel-reservation mongo-rate-script -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get configmap -n test-hotel-reservation failure-admin-rate -o yaml\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Examine the failure-admin-rate ConfigMap to confirm scripts that remove or alter the admin user",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get configmap -n test-hotel-reservation failure-admin-rate -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get configmap -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List ConfigMaps to discover scripts that may modify MongoDB users/permissions",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl get configmap -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation mongodb-rate -o yaml\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Inspect MongoDB deployment for init scripts and volume mounts that affect users/roles",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation mongodb-rate -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation rate -o yaml\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Review the rate deployment configuration for environment and image details",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation rate -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation -o wide | grep -E 'NAME|rate|mongodb-rate'\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Correlate pod IPs (rate and mongodb-rate) with log entries to link failing client to DB",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation -o wide | grep -E 'NAME|rate|mongodb-rate'\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation mongodb-rate-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Check MongoDB logs for user/role status and authentication failures from clients",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation mongodb-rate-56cc8659c9-slsxk --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "56cc8659c9-slsxk",
            "placeholder": "<POD_SUFFIX>",
            "position": 64
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation rate-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect logs of the failing rate service pod to reveal authentication errors",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation rate-7bdc978679-bwjlh\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7bdc978679-bwjlh",
            "placeholder": "<POD_SUFFIX>",
            "position": 56
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "List all pods in the namespace to identify failing components",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      }
    ]
  },
  {
    "problem_id": "user_unregistered_mongodb-detection-2",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List all pods in the namespace to identify failing components (rate pod in Error state).",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod rate-<POD_SUFFIX> -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Describe the failing rate pod to review container state and events indicating crash/backoff.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod rate-7bdc978679-dhdcz -n test-hotel-reservation\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7bdc978679-dhdcz",
            "placeholder": "<POD_SUFFIX>",
            "position": 38
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs rate-<POD_SUFFIX> -n test-hotel-reservation -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Fetch previous container logs of rate pod to capture crash reason showing MongoDB SASL authentication failure.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs rate-7bdc978679-dhdcz -n test-hotel-reservation --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7bdc978679-dhdcz",
            "placeholder": "<POD_SUFFIX>",
            "position": 30
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 70
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get deploy rate -n test-hotel-reservation -o yaml\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Inspect rate deployment configuration for environment and connection settings to MongoDB.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl get deploy rate -n test-hotel-reservation -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy mongodb-rate -n test-hotel-reservation -o yaml\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Inspect mongodb-rate deployment to verify auth mode and init script mounts.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl get deploy mongodb-rate -n test-hotel-reservation -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get configmap mongo-rate-script -n test-hotel-reservation -o yaml && echo '---' && kubectl get configmap failure-admin-rate -n test-hotel-reservation -o yaml && echo '---' && kubectl logs deploy/mongodb-rate -n test-hotel-reservation --tail=200\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Review MongoDB init scripts and mongodb-rate logs; confirms authentication events and UserNotFound errors for admin, correlating with rate pod failures.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get configmap mongo-rate-script -n test-hotel-reservation -o yaml && echo '---' && kubectl get configmap failure-admin-rate -n test-hotel-reservation -o yaml && echo '---' && kubectl logs deploy/mongodb-rate -n test-hotel-reservation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get all -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Summarize all resources to validate cluster-wide status and isolate the failing service.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get all -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "submit(\"Yes\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit detection result indicating anomalies were found based on evidence.",
        "sequence_number": 8,
        "original_command": "submit(\"Yes\")"
      }
    ]
  },
  {
    "problem_id": "wrong_bin_usage-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Lists all pods in the namespace to assess component presence and status.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation rate-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Checks rate service logs to rule out issues with rate backend.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation rate-7bdc978679-644bg --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7bdc978679-644bg",
            "placeholder": "<POD_SUFFIX>",
            "position": 56
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation frontend-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Examines frontend logs showing repeated GetProfiles failures, pointing suspicion toward profile service.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation frontend-7fc7ddc9db-hsq4c --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7fc7ddc9db-hsq4c",
            "placeholder": "<POD_SUFFIX>",
            "position": 60
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation consul-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Verifies Consul health and service registrations, ruling out service discovery issues.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation consul-78c8d79bb-xsx78 --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "78c8d79bb-xsx78",
            "placeholder": "<POD_SUFFIX>",
            "position": 58
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation search-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Checks search service logs to confirm it registered correctly and is healthy.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation search-5c64c8f5bc-pprkc --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5c64c8f5bc-pprkc",
            "placeholder": "<POD_SUFFIX>",
            "position": 58
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation profile-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Inspects profile service logs revealing it is running geo binary (cmd/geo), confirming wrong binary usage.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation profile-5fc7b778f5-lh6d7 --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5fc7b778f5-lh6d7",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          }
        ]
      },
      {
        "command": "submit([\"profile\"])",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submits the identified faulty component (profile) as the root cause.",
        "sequence_number": 7,
        "original_command": "submit([\"profile\"])"
      }
    ]
  },
  {
    "problem_id": "wrong_bin_usage-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List all pods in the namespace to verify component health and readiness.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "List services and ports to confirm service discovery endpoints (e.g., Consul service port).",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get svc -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Inspect deployments and container images to understand component versions and mappings.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/frontend --tail=200\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Check frontend logs; reveals repeated failures referencing profile lookups and initial Consul connection issues, indicating a downstream service anomaly.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/frontend --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/consul --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Validate Consul health and service registrations to rule out Consul as the root cause.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/consul --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/search --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Check search service logs to compare behavior and confirm it registers correctly with Consul.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/search --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/profile --tail=200\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Inspect profile service logs; shows geo service messages (e.g., cmd/geo/main.go), confirming wrong binary/image behavior for profile.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/profile --tail=200\")"
      },
      {
        "command": "submit(\"Yes\")",
        "type": "execute_command",
        "importance_score": 9,
        "description": "Submit the anomaly detection result indicating an issue was found.",
        "sequence_number": 8,
        "original_command": "submit(\"Yes\")"
      }
    ]
  },
  {
    "problem_id": "container_kill-localization",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl -n test-hotel-reservation run tmp-curl --image=radial/busyboxplus:curl --rm -i --restart=Never -- curl -s -D - 'frontend:5000/reservation'\")",
        "type": "execute_command",
        "importance_score": 7,
        "description": "Validate reservation endpoint availability; 400 indicates missing required params but route is present",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl -n test-hotel-reservation run tmp-curl --image=radial/busyboxplus:curl --rm -i --restart=Never -- curl -s -D - 'frontend:5000/reservation'\")"
      },
      {
        "command": "exec_shell(\"kubectl -n test-hotel-reservation run tmp-curl --image=radial/busyboxplus:curl --rm -i --restart=Never -- curl -s -D - 'frontend:5000/recommendations?require=rating&lat=37.7749&lon=-122.4194'\")",
        "type": "execute_command",
        "importance_score": 9,
        "description": "Validate correct /recommendations path; returns 400 indicating parameter validation (route exists)",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl -n test-hotel-reservation run tmp-curl --image=radial/busyboxplus:curl --rm -i --restart=Never -- curl -s -D - 'frontend:5000/recommendations?require=rating&lat=37.7749&lon=-122.4194'\")"
      },
      {
        "command": "exec_shell(\"kubectl -n test-hotel-reservation run tmp-curl --image=radial/busyboxplus:curl --rm -i --restart=Never -- curl -s -D - 'frontend:5000/recommendation?require=rating&lat=37.7749&lon=-122.4194'\")",
        "type": "execute_command",
        "importance_score": 8,
        "description": "Probe /recommendation path; returns 404 indicating route not present",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl -n test-hotel-reservation run tmp-curl --image=radial/busyboxplus:curl --rm -i --restart=Never -- curl -s -D - 'frontend:5000/recommendation?require=rating&lat=37.7749&lon=-122.4194'\")"
      },
      {
        "command": "exec_shell(\"kubectl -n test-hotel-reservation run tmp-curl --image=radial/busyboxplus:curl --rm -i --restart=Never -- curl -s -D - 'frontend:5000/recommend?require=rating&lat=37.7749&lon=-122.4194'\")",
        "type": "execute_command",
        "importance_score": 9,
        "description": "Use a temporary curl pod to test the recommend endpoint via the frontend; reveals 404 indicating potential frontend routing/implementation issue",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl -n test-hotel-reservation run tmp-curl --image=radial/busyboxplus:curl --rm -i --restart=Never -- curl -s -D - 'frontend:5000/recommend?require=rating&lat=37.7749&lon=-122.4194'\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/user --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Inspect user service logs for health and registration",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/user --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl -n test-hotel-reservation run tmp-curl --image=radial/busyboxplus:curl --rm -i --restart=Never -- curl -s -D - 'frontend:5000/hotels?inDate=2015-04-09&outDate=2015-04-10&lat=37.7749&lon=-122.4194'\")",
        "type": "execute_command",
        "importance_score": 7,
        "description": "Use a temporary curl pod to test the hotels search endpoint end-to-end via the frontend",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl -n test-hotel-reservation run tmp-curl --image=radial/busyboxplus:curl --rm -i --restart=Never -- curl -s -D - 'frontend:5000/hotels?inDate=2015-04-09&outDate=2015-04-10&lat=37.7749&lon=-122.4194'\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/reservation --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Inspect reservation service logs for health and registration",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/reservation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl -n test-hotel-reservation run tmp-curl --image=radial/busyboxplus:curl --rm -i --restart=Never -- curl -s -D - frontend:5000/\")",
        "type": "execute_command",
        "importance_score": 6,
        "description": "Launch a temporary curl pod to probe the frontend root endpoint and verify basic HTTP availability",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl -n test-hotel-reservation run tmp-curl --image=radial/busyboxplus:curl --rm -i --restart=Never -- curl -s -D - frontend:5000/\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/rate --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Inspect rate service logs for health and registration",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/rate --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/recommendation --tail=200\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Inspect recommendation service logs to ensure it starts, connects to DB, and registers with Consul",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/recommendation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/profile --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Inspect profile service logs for health and registration",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/profile --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/consul --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Inspect recent logs of the Consul deployment to verify leader election and service registration behavior",
        "sequence_number": 12,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/consul --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/frontend --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Inspect recent logs of the frontend deployment to identify client-side errors and dependency connectivity issues",
        "sequence_number": 13,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/frontend --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/search --tail=200\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Inspect recent logs of the search deployment to confirm healthy startup and Consul registration",
        "sequence_number": 14,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/search --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "List services in the namespace to provide context on service endpoints and networking (auxiliary check).",
        "sequence_number": 15,
        "original_command": "exec_shell(\"kubectl get svc -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/geo --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Fetch recent logs of the geo deployment to review runtime behavior around the time of the restart.",
        "sequence_number": 16,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/geo --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod geo-<POD_SUFFIX> -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Describe the specific geo pod to confirm container termination details (Last State exit code 137 indicates container was killed).",
        "sequence_number": 17,
        "original_command": "exec_shell(\"kubectl describe pod geo-84fbc958c7-v6gdp -n test-hotel-reservation\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-v6gdp",
            "placeholder": "<POD_SUFFIX>",
            "position": 37
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "List all pods in the namespace to identify abnormal statuses and restart counts (shows geo pod has restarted).",
        "sequence_number": 18,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      }
    ]
  },
  {
    "problem_id": "noop_detection_social_network-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network compose-post-service-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Validate compose-post-service startup and readiness through recent logs.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network compose-post-service-64f6c9b656-qf8hr --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "64f6c9b656-qf8hr",
            "placeholder": "<POD_SUFFIX>",
            "position": 69
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network home-timeline-service-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Confirm home-timeline-service has started properly without runtime errors.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network home-timeline-service-7d787c8dfd-qz64g --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7d787c8dfd-qz64g",
            "placeholder": "<POD_SUFFIX>",
            "position": 70
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network nginx-thrift-7c48f57-n4rjl -c nginx-thrift --tail=200\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Inspect gateway (nginx-thrift) logs to detect any frontend or routing errors.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network nginx-thrift-7c48f57-n4rjl -c nginx-thrift --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network user-mongodb-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Review MongoDB logs to ensure the database is running and accepting connections from services.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network user-mongodb-75847cfbb-c9ssw --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "75847cfbb-c9ssw",
            "placeholder": "<POD_SUFFIX>",
            "position": 61
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network user-service-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Check application logs for user-service to validate successful startup and backend connectivity.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network user-service-6d5985bd55-mrmbf --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "6d5985bd55-mrmbf",
            "placeholder": "<POD_SUFFIX>",
            "position": 61
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n test-social-network -o wide\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Verify that each service has healthy endpoints backing it, confirming pod-to-service connectivity.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get endpoints -n test-social-network -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network -o wide\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List services with details to ensure service objects are present and ports are exposed as expected.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get events -n test-social-network --sort-by=.lastTimestamp\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Inspect recent namespace events to confirm normal scheduling, scaling, and startup without errors.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl get events -n test-social-network --sort-by=.lastTimestamp\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "List all pods in the test-social-network namespace to verify overall workload health and readiness.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      }
    ]
  },
  {
    "problem_id": "auth_miss_mongodb-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the namespace to identify unhealthy components; detects the url-shorten-mongodb pod in CrashLoopBackOff.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network url-shorten-mongodb-<POD_SUFFIX> --all<REPLICA_SUFF<REPLICA_SUFFIX>vious\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Attempt to retrieve previous container logs for the crashing pod to inspect failure causes.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network url-shorten-mongodb-657fcc5df6-w8v9m --all-containers --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "657fcc5df6-w8v9m",
            "placeholder": "<POD_SUFFIX>",
            "position": 68
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-containers",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 86
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 99
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n test-social-network url-shorten-mongodb-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Describe the problematic pod to review state, restart history, volumes (including TLS secret), and events.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl describe pod -n test-social-network url-shorten-mongodb-657fcc5df6-w8v9m\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "657fcc5df6-w8v9m",
            "placeholder": "<POD_SUFFIX>",
            "position": 76
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network url-shorten-mongodb-<POD_SUFFIX> url-shorten-mongodb --tail=200 --since=5m\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Fetch recent logs from the url-shorten-mongodb container showing SSL certificate expired/not yet valid, pinpointing the root cause.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network url-shorten-mongodb-657fcc5df6-w8v9m url-shorten-mongodb --tail=200 --since=5m\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "657fcc5df6-w8v9m",
            "placeholder": "<POD_SUFFIX>",
            "position": 68
          }
        ]
      },
      {
        "command": "submit([\"url-shorten-mongodb\"])",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the identified faulty component responsible for the incident.",
        "sequence_number": 5,
        "original_command": "submit([\"url-shorten-mongodb\"])"
      }
    ]
  },
  {
    "problem_id": "revoke_auth_mongodb-mitigation-1",
    "key_commands": [
      {
        "command": "submit()",
        "type": "execute_command",
        "importance_score": 2,
        "description": "Submit the solution after successful mitigation verification.",
        "sequence_number": 1,
        "original_command": "submit()"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Verify geo service starts successfully after privileges are restored.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-84fbc958c7-phl88 --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-phl88",
            "placeholder": "<POD_SUFFIX>",
            "position": 55
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation mongodb-geo-<POD_SUFFIX> -- mongo admin -u admin -p admin --authenticationDatabase admin --eval 'db.grantRolesToUser(\\\"admin\\\", [{role: \\\"readWrite\\\", db: \\\"geo-db\\\"}])'\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Grant readWrite role on geo-db to the admin user in MongoDB to resolve the authorization failure.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation mongodb-geo-5ff578bcb8-l2dxk -- mongo admin -u admin -p admin --authenticationDatabase admin --eval 'db.grantRolesToUser(\\\"admin\\\", [{role: \\\"readWrite\\\", db: \\\"geo-db\\\"}])'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-l2dxk",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation mongodb-geo-<POD_SUFFIX> -- bash -lc '/scripts/revoke-miti<POD_SUFFIX>-mongo.sh'\")",
        "type": "execute_command",
        "importance_score": 3,
        "description": "Attempt to run the in-container script to restore admin privileges; failed due to permission issues, guiding alternative approach.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation mongodb-geo-5ff578bcb8-l2dxk -- bash -lc '/scripts/revoke-mitigate-admin-geo-mongo.sh'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-l2dxk",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          },
          {
            "type": "k8s_pod_suffix",
            "original": "mitigate-admin",
            "placeholder": "<POD_SUFFIX>",
            "position": 109
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation mongodb-geo-<POD_SUFFIX> -- mongo admin -u admin -p admin --authenticationDatabase admin --quiet --eval 'printjson(db.getUser(\\\"admin\\\"))'\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Check current roles of the MongoDB admin user to confirm missing readWrite on geo-db.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation mongodb-geo-5ff578bcb8-l2dxk -- mongo admin -u admin -p admin --authenticationDatabase admin --quiet --eval 'printjson(db.getUser(\\\"admin\\\"))'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-l2dxk",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get configmap -n test-hotel-reservation mongo-geo-script -o yaml && echo '---' && kubectl get configmap -n test-hotel-reservation failure-admin-geo -o yaml\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Review initialization and mitigation scripts to understand intended MongoDB user roles and privileges.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get configmap -n test-hotel-reservation mongo-geo-script -o yaml && echo '---' && kubectl get configmap -n test-hotel-reservation failure-admin-geo -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n test-hotel-reservation mongodb-geo-<POD_SUFFIX> && echo '--- logs ---' && kubectl logs -n test-hotel-reservation mongodb-geo-5ff5<POD_SUFFIX>ail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Describe and fetch logs from the MongoDB pod to verify auth settings and observe unauthorized access errors.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl describe pod -n test-hotel-reservation mongodb-geo-5ff578bcb8-l2dxk && echo '--- logs ---' && kubectl logs -n test-hotel-reservation mongodb-geo-5ff578bcb8-l2dxk --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-l2dxk",
            "placeholder": "<POD_SUFFIX>",
            "position": 71
          },
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-l2dxk",
            "placeholder": "<POD_SUFFIX>",
            "position": 165
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n test-hotel-reservation geo-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Describe the geo pod to confirm CrashLoopBackOff and gather event details.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl describe pod -n test-hotel-reservation geo-84fbc958c7-phl88\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-phl88",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-<POD_SUFFIX> -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Inspect previous container logs of the geo service to find the authorization failure.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-84fbc958c7-phl88 --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-phl88",
            "placeholder": "<POD_SUFFIX>",
            "position": 55
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 69
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List all pods in the namespace to identify failing components.",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_cart_service_failure-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "List all pods in the astronomy-shop namespace to spot unhealthy pods or restarts.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod flagd-<POD_SUFFIX> -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Inspect flagd pod details to rule out dependency issues impacting other services.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod flagd-5f48fd7789-pd8ch -n astronomy-shop\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5f48fd7789-pd8ch",
            "placeholder": "<POD_SUFFIX>",
            "position": 39
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod fraud-detection-<POD_SUFFIX> -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Get detailed status and events for the fraud-detection pod revealing CrashLoopBackOff and exit code.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl describe pod fraud-detection-65868bcdb5-tqhnw -n astronomy-shop\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-tqhnw",
            "placeholder": "<POD_SUFFIX>",
            "position": 49
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs fraud-detection-<POD_SUFFIX> -n astronomy-shop -c fraud<REPLICA_SUF<REPLICA_SUFFIX>evious\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Attempt to fetch logs from the previously crashed fraud-detection container for failure context.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs fraud-detection-65868bcdb5-tqhnw -n astronomy-shop -c fraud-detection --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-tqhnw",
            "placeholder": "<POD_SUFFIX>",
            "position": 41
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 80
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 92
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs fraud-detection-<POD_SUFFIX> -n astronomy-shop -c fraud<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Fetch current logs of the fraud-detection container to observe startup behavior.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs fraud-detection-65868bcdb5-tqhnw -n astronomy-shop -c fraud-detection\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-tqhnw",
            "placeholder": "<POD_SUFFIX>",
            "position": 41
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 80
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods fraud-detection-<POD_SUFFIX> -n astronomy-shop -o json\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Retrieve raw pod JSON to confirm containerStatuses and CrashLoopBackOff details including exit code.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get pods fraud-detection-65868bcdb5-tqhnw -n astronomy-shop -o json\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-tqhnw",
            "placeholder": "<POD_SUFFIX>",
            "position": 45
          }
        ]
      },
      {
        "command": "submit(\"Yes\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the final decision indicating anomalies were detected.",
        "sequence_number": 7,
        "original_command": "submit(\"Yes\")"
      }
    ]
  },
  {
    "problem_id": "flower_node_stop-detection",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n docker\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Check for Flower pods in the target 'docker' namespace to detect missing components.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n docker\")"
      },
      {
        "command": "exec_shell(\"kubectl get namespaces\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Verify the existence of the 'docker' namespace or identify potential namespace issues.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get namespaces\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -A\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "List pods across all namespaces to see if Flower components are running elsewhere.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get pods -A\")"
      },
      {
        "command": "exec_shell(\"kubectl get all -A | grep -Ei 'flower|serverapp|clientapp|superlink|supernode'\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Search all resources cluster-wide for Flower-related components to confirm absence.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl get all -A | grep -Ei 'flower|serverapp|clientapp|superlink|supernode'\")"
      },
      {
        "command": "submit(\"Yes\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the anomaly detection result indicating Flower components are not running.",
        "sequence_number": 5,
        "original_command": "submit(\"Yes\")"
      }
    ]
  },
  {
    "problem_id": "scale_pod_zero_social_net-mitigation-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the namespace to assess current workload state and notice missing user-service pods.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Inspect deployments to confirm user-service has zero replicas (0/0), identifying the root cause.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get deploy -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl scale deploy/user-service -n test-social-network --replicas=1 && kubectl rollout status deploy/user-service -n test-social-network\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Scale user-service to 1 replica and wait for the deployment rollout to complete, directly resolving the issue.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl scale deploy/user-service -n test-social-network --replicas=1 && kubectl rollout status deploy/user-service -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network -l app=user-service -o wide\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Verify that the user-service pod is now running and obtain its details after scaling.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network -l app=user-service -o wide\")"
      }
    ]
  },
  {
    "problem_id": "user_unregistered_mongodb-analysis-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation mongodb-profile-<POD_SUFFIX> | sed -n '1,120p'\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Queries logs from another MongoDB instance for comparison/baseline of normal startup and access patterns.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation mongodb-profile-758cb77f9f-4msdf | sed -n '1,120p'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "758cb77f9f-4msdf",
            "placeholder": "<POD_SUFFIX>",
            "position": 67
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation mongodb-geo-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Fetches logs from the MongoDB backing the geo service to observe authentication behavior and errors.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation mongodb-geo-5ff578bcb8-78849\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-78849",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation geo -o yaml\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Retrieves the geo Deployment manifest to review container command, image, and environment configuration.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation geo -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n test-hotel-reservation geo-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Describes the geo pod to inspect container state, restart reasons, and events confirming CrashLoopBackOff.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl describe pod -n test-hotel-reservation geo-84fbc958c7-c7sd4\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-c7sd4",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation pod/geo-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Fetches current logs from the geo pod, revealing SASL authentication failure against MongoDB.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation pod/geo-84fbc958c7-c7sd4\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-c7sd4",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-<POD_SUFFIX> -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Attempts to fetch logs from the previously terminated container instance of the geo pod for crash context.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-84fbc958c7-c7sd4 --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-c7sd4",
            "placeholder": "<POD_SUFFIX>",
            "position": 55
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 69
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Lists all pods in the namespace to identify failing components and their statuses.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      }
    ]
  },
  {
    "problem_id": "auth_miss_mongodb-analysis-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the namespace to identify failing components and their statuses.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod url-shorten-mongodb-<POD_SUFFIX> -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Describe the failing MongoDB pod to inspect container state, mounts, and events.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod url-shorten-mongodb-54866bdb8d-xjhjk -n test-social-network\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "54866bdb8d-xjhjk",
            "placeholder": "<POD_SUFFIX>",
            "position": 53
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs url-shorten-mongodb-<POD_SUFFIX> -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Fetch container logs from the failing pod to reveal the fatal error indicating an invalid/expired SSL certificate.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs url-shorten-mongodb-54866bdb8d-xjhjk -n test-social-network\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "54866bdb8d-xjhjk",
            "placeholder": "<POD_SUFFIX>",
            "position": 45
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pod url-shorten-mongodb-<POD_SUFFIX> -n test-social-network -o wide\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Get detailed status of the other MongoDB pod to compare health and placement.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl get pod url-shorten-mongodb-77894f9b76-nvj7d -n test-social-network -o wide\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "77894f9b76-nvj7d",
            "placeholder": "<POD_SUFFIX>",
            "position": 48
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod url-shorten-mongodb-<POD_SUFFIX> -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Describe the healthy MongoDB pod to compare configuration (volumes, TLS secret) with the failing one.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl describe pod url-shorten-mongodb-77894f9b76-nvj7d -n test-social-network\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "77894f9b76-nvj7d",
            "placeholder": "<POD_SUFFIX>",
            "position": 53
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get deploy url-shorten-mongodb -n test-social-network -o yaml\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Retrieve the Deployment spec to confirm TLS secret mounting and configuration that may cause the certificate issue.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get deploy url-shorten-mongodb -n test-social-network -o yaml\")"
      },
      {
        "command": "submit({\"system_level\": \"Application\", \"fault_type\": \"Misconfiguration\"})",
        "type": "execute_command",
        "importance_score": 8,
        "description": "Submit the diagnostic conclusion for evaluation.",
        "sequence_number": 7,
        "original_command": "submit({\"system_level\": \"Application\", \"fault_type\": \"Misconfiguration\"})"
      }
    ]
  },
  {
    "problem_id": "pod_failure_hotel_res-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "List all pods in the test-hotel-reservation namespace to quickly identify the failing pod (user) with RunContainerError.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod user-<POD_SUFFIX> -n test-hotel-reservation; echo '---LOGS (current)---'; kubectl logs user-66d5<POD_SUFFIX>test-hotel-reservation --all-containers=true; echo '---LOGS (previous)---'; kubectl logs user-66d5d6f8<POD_SUFFIX>-hotel-reservation --all-containers=true -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Describe the failing pod and retrieve current and previous logs to diagnose the CrashLoopBackOff and identify the root cause (executable not found).",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod user-66d5d6f874-slrgw -n test-hotel-reservation; echo '---LOGS (current)---'; kubectl logs user-66d5d6f874-slrgw -n test-hotel-reservation --all-containers=true; echo '---LOGS (previous)---'; kubectl logs user-66d5d6f874-slrgw -n test-hotel-reservation --all-containers=true --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "66d5d6f874-slrgw",
            "placeholder": "<POD_SUFFIX>",
            "position": 38
          },
          {
            "type": "k8s_pod_suffix",
            "original": "66d5d6f874-slrgw",
            "placeholder": "<POD_SUFFIX>",
            "position": 129
          },
          {
            "type": "k8s_pod_suffix",
            "original": "66d5d6f874-slrgw",
            "placeholder": "<POD_SUFFIX>",
            "position": 243
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 297
          }
        ]
      }
    ]
  },
  {
    "problem_id": "pod_kill_hotel_res-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation consul-<POD_SUFFIX> -- sh -lc 'apk add --no-cache curl >/dev/null 2>&1 || true; curl -sS -D - \\\"http://frontend:5000/recommendations?require=rate&inDate=2025-09-12&outDate=2025-09-13&lat=37.7867&lon=-122.4112&locale=en&currency=USD\\\" -o /dev/null'\")",
        "type": "execute_command",
        "importance_score": 9,
        "description": "End-to-end recommendations API check with full parameters returning 200 OK, proving system recovered post-chaos.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation consul-78c8d79bb-jgzt6 -- sh -lc 'apk add --no-cache curl >/dev/null 2>&1 || true; curl -sS -D - \\\"http://frontend:5000/recommendations?require=rate&inDate=2025-09-12&outDate=2025-09-13&lat=37.7867&lon=-122.4112&locale=en&currency=USD\\\" -o /dev/null'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "78c8d79bb-jgzt6",
            "placeholder": "<POD_SUFFIX>",
            "position": 58
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation consul-<POD_SUFFIX> -- sh -lc 'apk add --no-cache curl >/dev/null 2>&1 || true; curl -sS -D - \\\"http://frontend:5000/recommendations?lat=37.7867&lon=-122.4112\\\" -o /dev/null'\")",
        "type": "execute_command",
        "importance_score": 5,
        "description": "Attempt recommendations API without full parameters to observe validation behavior and connectivity.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation consul-78c8d79bb-jgzt6 -- sh -lc 'apk add --no-cache curl >/dev/null 2>&1 || true; curl -sS -D - \\\"http://frontend:5000/recommendations?lat=37.7867&lon=-122.4112\\\" -o /dev/null'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "78c8d79bb-jgzt6",
            "placeholder": "<POD_SUFFIX>",
            "position": 58
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation consul-<POD_SUFFIX> -- sh -lc 'apk add --no-cache curl >/dev/null 2>&1 || true; curl -sS http://frontend:5000/hotels?inDate=2025-09-12\\\\&outDate=2025-09-13\\\\&lat=37.7867\\\\&lon=-122.4112\\\\&locale=en\\\\&currency=USD'\")",
        "type": "execute_command",
        "importance_score": 9,
        "description": "End-to-end functional check of the Hotels API via frontend to confirm system behavior.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation consul-78c8d79bb-jgzt6 -- sh -lc 'apk add --no-cache curl >/dev/null 2>&1 || true; curl -sS http://frontend:5000/hotels?inDate=2025-09-12\\\\&outDate=2025-09-13\\\\&lat=37.7867\\\\&lon=-122.4112\\\\&locale=en\\\\&currency=USD'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "78c8d79bb-jgzt6",
            "placeholder": "<POD_SUFFIX>",
            "position": 58
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation consul-<POD_SUFFIX> -- sh -lc \\'apk add --no-cache curl >/dev/null 2>&1 || true; curl -sS http://frontend:5000/hotels?inDate=2025-09-12\\\\\\\\&outDate=2025-09-13\\\\\\\\&lat=37.7867\\\\\\\\&lon=-122.4112\\\\\\\\&locale=en\\\\\\\\&currency=USD\\'\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "From within cluster, perform an end-to-end request to the frontend service to validate application functionality",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation consul-78c8d79bb-jgzt6 -- sh -lc \\'apk add --no-cache curl >/dev/null 2>&1 || true; curl -sS http://frontend:5000/hotels?inDate=2025-09-12\\\\\\\\&outDate=2025-09-13\\\\\\\\&lat=37.7867\\\\\\\\&lon=-122.4112\\\\\\\\&locale=en\\\\\\\\&currency=USD\\'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "78c8d79bb-jgzt6",
            "placeholder": "<POD_SUFFIX>",
            "position": 58
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation consul-<POD_SUFFIX> -- sh -c 'apk add --no-cache curl >/dev/null 2>&1 || true; curl -s http://localhost:8500/v1/health/service/srv-search?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-profile?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-recommendation?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-user?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-reservation?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-geo?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-rate?passing=1 && echo' \")",
        "type": "execute_command",
        "importance_score": 8,
        "description": "Install curl in Consul pod and query Consul health API to validate all services are registered and passing.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation consul-78c8d79bb-jgzt6 -- sh -c 'apk add --no-cache curl >/dev/null 2>&1 || true; curl -s http://localhost:8500/v1/health/service/srv-search?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-profile?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-recommendation?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-user?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-reservation?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-geo?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-rate?passing=1 && echo' \")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "78c8d79bb-jgzt6",
            "placeholder": "<POD_SUFFIX>",
            "position": 58
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation consul-<POD_SUFFIX> -- sh -c \\'apk add --no-cache curl >/dev/null 2>&1 || true; curl -s http://localhost:8500/v1/health/service/srv-search?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-profile?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-recommendation?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-user?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-reservation?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-geo?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-rate?passing=1 && echo\\' \")",
        "type": "execute_command",
        "importance_score": 9,
        "description": "Exec into the Consul pod to install curl and query Consul health endpoints for all services, validating that they are registered and passing.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation consul-78c8d79bb-jgzt6 -- sh -c \\'apk add --no-cache curl >/dev/null 2>&1 || true; curl -s http://localhost:8500/v1/health/service/srv-search?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-profile?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-recommendation?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-user?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-reservation?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-geo?passing=1 && echo && curl -s http://localhost:8500/v1/health/service/srv-rate?passing=1 && echo\\' \")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "78c8d79bb-jgzt6",
            "placeholder": "<POD_SUFFIX>",
            "position": 58
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Confirm that service endpoints point to live pod IPs for all components.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get endpoints -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Verify geo service readiness and registration.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-84fbc958c7-2594h --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-2594h",
            "placeholder": "<POD_SUFFIX>",
            "position": 55
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation user-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Inspect user service logs (target of chaos) to ensure it restarted and is healthy.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation user-66d5d6f874-7hptw --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "66d5d6f874-7hptw",
            "placeholder": "<POD_SUFFIX>",
            "position": 56
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl exec -n test-hotel-reservation consul-<POD_SUFFIX> -- sh -lc \\'apk add --no-cache curl >/dev/null 2>&1 || true; curl -sS -D - \\\\\\\"http://frontend:5000/recommendations?lat=37.7867&lon=-122.4112\\\\\\\" -o /dev/null\\'\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Probe recommendation API via frontend to detect parameter or integration issues (observed 400 indicating missing parameters)",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl exec -n test-hotel-reservation consul-78c8d79bb-jgzt6 -- sh -lc \\'apk add --no-cache curl >/dev/null 2>&1 || true; curl -sS -D - \\\\\\\"http://frontend:5000/recommendations?lat=37.7867&lon=-122.4112\\\\\\\" -o /dev/null\\'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "78c8d79bb-jgzt6",
            "placeholder": "<POD_SUFFIX>",
            "position": 58
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation reservation-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Verify reservation service readiness and Consul registration.",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation reservation-78c9f7976b-676f7 --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "78c9f7976b-676f7",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation rate-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Check rate service DB and cache setup and registration.",
        "sequence_number": 12,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation rate-7bdc978679-xl74l --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7bdc978679-xl74l",
            "placeholder": "<POD_SUFFIX>",
            "position": 56
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation recommendation-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Check recommendation service initialization and Consul registration.",
        "sequence_number": 13,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation recommendation-6879fb56bf-699j2 --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "6879fb56bf-699j2",
            "placeholder": "<POD_SUFFIX>",
            "position": 66
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation profile-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Confirm profile service database connectivity and registration.",
        "sequence_number": 14,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation profile-8b6dd7c6c-dphbr --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "8b6dd7c6c-dphbr",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation search-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Verify search service startup and registration with Consul.",
        "sequence_number": 15,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation search-5c64c8f5bc-99vlj --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5c64c8f5bc-99vlj",
            "placeholder": "<POD_SUFFIX>",
            "position": 58
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation consul-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Check Consul agent logs to confirm leadership and service registrations.",
        "sequence_number": 16,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation consul-78c8d79bb-jgzt6 --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "78c8d79bb-jgzt6",
            "placeholder": "<POD_SUFFIX>",
            "position": 58
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation frontend-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Inspect frontend logs to detect connectivity issues (e.g., Consul errors) and recovery.",
        "sequence_number": 17,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation frontend-7fc7ddc9db-vm6mp --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "7fc7ddc9db-vm6mp",
            "placeholder": "<POD_SUFFIX>",
            "position": 60
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Get detailed pod info (IP, node) to verify scheduling and networking post-chaos.",
        "sequence_number": 18,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get events -n test-hotel-reservation --sort-by=.metadata.creationTimestamp\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Review ordered events to identify chaos-induced pod kill and subsequent recovery.",
        "sequence_number": 19,
        "original_command": "exec_shell(\"kubectl get events -n test-hotel-reservation --sort-by=.metadata.creationTimestamp\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "List services and ports to understand service exposure and discovery.",
        "sequence_number": 20,
        "original_command": "exec_shell(\"kubectl get svc -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the namespace to assess current workload status and restarts.",
        "sequence_number": 21,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      }
    ]
  },
  {
    "problem_id": "misconfig_app_hotel_res-analysis-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List pods in the namespace to identify failing components.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod geo-<POD_SUFFIX> -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Inspect the failing geo pod for state, events, and restart/backoff details.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod geo-c47ff745-c7svr -n test-hotel-reservation\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "c47ff745-c7svr",
            "placeholder": "<POD_SUFFIX>",
            "position": 37
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs geo-<POD_SUFFIX> -n test-hotel-reservation -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Retrieve previous container logs to find the crash cause; reveals DB URL set to mongodb-geo:27777 and connection failure.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs geo-c47ff745-c7svr -n test-hotel-reservation --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "c47ff745-c7svr",
            "placeholder": "<POD_SUFFIX>",
            "position": 29
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 69
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-hotel-reservation -o wide | grep mongodb-geo || kubectl describe svc mongodb-geo -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Check the mongodb-geo service and its port (27017) to compare against the application's configured DB port.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl get svc -n test-hotel-reservation -o wide | grep mongodb-geo || kubectl describe svc mongodb-geo -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy geo -n test-hotel-reservation -o yaml\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Examine the geo deployment configuration for image, command, and environment settings that might cause misconfiguration.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl get deploy geo -n test-hotel-reservation -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get configmaps -n test-hotel-reservation -o yaml\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "List and inspect ConfigMaps for any related configurations or scripts; auxiliary verification.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get configmaps -n test-hotel-reservation -o yaml\")"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_recommendation_service_cache_failure-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Lists all pods in the astronomy-shop namespace to identify any with abnormal states.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Retrieves current container logs from the failing fraud-detection pod for error details.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-65868bcdb5-x295l\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-x295l",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-<POD_SUFFIX> -p\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Retrieves logs from the previous instance of the fraud-detection container to inspect prior crash output.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-65868bcdb5-x295l -p\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-x295l",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n astronomy-shop fraud-detection-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Describes the fraud-detection pod, revealing CrashLoopBackOff status and events that confirm the anomaly.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl describe pod -n astronomy-shop fraud-detection-65868bcdb5-x295l\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-x295l",
            "placeholder": "<POD_SUFFIX>",
            "position": 67
          }
        ]
      },
      {
        "command": "submit(\"Yes\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submits the final decision confirming anomalies were detected.",
        "sequence_number": 5,
        "original_command": "submit(\"Yes\")"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_payment_service_unreachable-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "List all pods in the astronomy-shop namespace to identify unhealthy pods and restarts.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl get events -n astronomy-shop --sort-by=.lastTimestamp\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Show recent namespace events to surface BackOffs, probe failures, and restarts in time order.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get events -n astronomy-shop --sort-by=.lastTimestamp\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop ad-<POD_SUFFIX> -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Fetch previous logs for the ad pod to investigate the last crash prior to restart.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop ad-94bd576b5-8vcgx --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-8vcgx",
            "placeholder": "<POD_SUFFIX>",
            "position": 46
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 60
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop ad-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "View current logs for the ad pod to check runtime behavior after restart.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop ad-94bd576b5-8vcgx\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-8vcgx",
            "placeholder": "<POD_SUFFIX>",
            "position": 46
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-<POD_SUFFIX> -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Fetch previous logs for the fraud-detection pod to inspect its last failed run.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-65868bcdb5-8tpnx --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-8tpnx",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 73
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "View current logs for the fraud-detection pod to verify ongoing issues.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop fraud-detection-65868bcdb5-8tpnx\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-8tpnx",
            "placeholder": "<POD_SUFFIX>",
            "position": 59
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n astronomy-shop fraud-detection-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Describe the fraud-detection pod to confirm CrashLoopBackOff status, exit codes, and events.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl describe pod -n astronomy-shop fraud-detection-65868bcdb5-8tpnx\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-8tpnx",
            "placeholder": "<POD_SUFFIX>",
            "position": 67
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n astronomy-shop ad-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Describe the ad pod to confirm prior crash details and restart history.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl describe pod -n astronomy-shop ad-94bd576b5-8vcgx\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-8vcgx",
            "placeholder": "<POD_SUFFIX>",
            "position": 54
          }
        ]
      },
      {
        "command": "submit(\"Yes\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the anomaly detection result indicating issues were found.",
        "sequence_number": 9,
        "original_command": "submit(\"Yes\")"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_product_catalog_service_failure-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "List all pods in the astronomy-shop namespace to spot anomalies such as restarts or non-ready statuses.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod fraud-detection-<POD_SUFFIX> -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect detailed pod state and events; reveals container terminations, exit code 137, and BackOff behavior.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod fraud-detection-65868bcdb5-nqwdf -n astronomy-shop\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-nqwdf",
            "placeholder": "<POD_SUFFIX>",
            "position": 49
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs fraud-detection-<POD_SUFFIX> -n astronomy-shop -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Attempt to retrieve logs from the previous container instance to gather crash context.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs fraud-detection-65868bcdb5-nqwdf -n astronomy-shop --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-nqwdf",
            "placeholder": "<POD_SUFFIX>",
            "position": 41
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 73
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs fraud-detection-<POD_SUFFIX> -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Retrieve current/last container logs for additional diagnostic information.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs fraud-detection-65868bcdb5-nqwdf -n astronomy-shop\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-nqwdf",
            "placeholder": "<POD_SUFFIX>",
            "position": 41
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pod fraud-detection-<POD_SUFFIX> -n astronomy-shop -o jsonpath='{.status.containerStatuses[0].lastState.terminated.reason} {.status.containerStatuses[0].lastState.terminated.signal} {.status.containerStatuses[0].lastState.terminated.exitCode} {.status.containerStatuses[0].lastState.terminated.finishedAt}'\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Extract termination reason, signal, exit code, and timestamp to precisely confirm the failure (exit code 137).",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl get pod fraud-detection-65868bcdb5-nqwdf -n astronomy-shop -o jsonpath='{.status.containerStatuses[0].lastState.terminated.reason} {.status.containerStatuses[0].lastState.terminated.signal} {.status.containerStatuses[0].lastState.terminated.exitCode} {.status.containerStatuses[0].lastState.terminated.finishedAt}'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "65868bcdb5-nqwdf",
            "placeholder": "<POD_SUFFIX>",
            "position": 44
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get events -n astronomy-shop --sort-by=.lastTimestamp\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Review recent namespace events to corroborate BackOff and restart behavior for the affected pod.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get events -n astronomy-shop --sort-by=.lastTimestamp\")"
      }
    ]
  },
  {
    "problem_id": "k8s_target_port-misconfig-analysis-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "List all pods in the namespace to verify workloads are running",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "List services to confirm presence of user-service and exposed port",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deploy/compose-post-service --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Check client-side errors indicating connection refused to user-service:9090",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deploy/compose-post-service --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-social-network deploy/user-service --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Verify user-service startup and basic runtime behavior",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-social-network deploy/user-service --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy user-service -n test-social-network -o yaml\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Inspect deployment to confirm containerPort is 9090",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl get deploy user-service -n test-social-network -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc user-service -n test-social-network -o yaml\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Inspect service to reveal targetPort is 9999, indicating a port mismatch",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl get svc user-service -n test-social-network -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints user-service -n test-social-network -o yaml\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Verify endpoints show port 9999, confirming mismatch with container port 9090",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get endpoints user-service -n test-social-network -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl exec -n test-social-network pod/user-service-<POD_SUFFIX> -- sh -c 'ss -tlnp || netstat -tlnp'\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Attempt to verify listening ports inside the user-service pod (failed, minor)",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl exec -n test-social-network pod/user-service-6d5985bd55-tdk68 -- sh -c 'ss -tlnp || netstat -tlnp'\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "6d5985bd55-tdk68",
            "placeholder": "<POD_SUFFIX>",
            "position": 65
          }
        ]
      }
    ]
  },
  {
    "problem_id": "container_kill-detection",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Lists all pods in the namespace to detect anomalies like restarts and identify the target pod.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod geo-<POD_SUFFIX> -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Describes the pod to inspect container state and events; reveals Last State terminated with exit code 137 indicating a kill.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod geo-84fbc958c7-7j7nz -n test-hotel-reservation\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-7j7nz",
            "placeholder": "<POD_SUFFIX>",
            "position": 37
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs geo-<POD_SUFFIX> -n test-hotel-reservation -c hotel-reserv-geo -<REPLICA_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Fetches logs from the previous container instance to corroborate the crash/restart context.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs geo-84fbc958c7-7j7nz -n test-hotel-reservation -c hotel-reserv-geo --previous --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-7j7nz",
            "placeholder": "<POD_SUFFIX>",
            "position": 29
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 89
          }
        ]
      },
      {
        "command": "submit(\"Yes\")",
        "type": "execute_command",
        "importance_score": 9,
        "description": "Submits the anomaly detection result confirming a container kill/restart was detected.",
        "sequence_number": 4,
        "original_command": "submit(\"Yes\")"
      }
    ]
  },
  {
    "problem_id": "user_unregistered_mongodb-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "List all pods to identify failing components in the namespace (geo pod in Error state).",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n test-hotel-reservation geo-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Describe the failing geo pod to inspect restart/backoff events and container state.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl describe pod -n test-hotel-reservation geo-84fbc958c7-przl5\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-przl5",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-<POD_SUFFIX> -c hotel-reserv-geo -<REPLICA_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Fetch previous container logs for geo service to reveal SASL authentication failure.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation geo-84fbc958c7-przl5 -c hotel-reserv-geo --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "84fbc958c7-przl5",
            "placeholder": "<POD_SUFFIX>",
            "position": 55
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 89
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation mongodb-geo-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Inspect MongoDB geo logs showing authentication attempts and 'UserNotFound: admin' errors, confirming the root cause.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation mongodb-geo-5ff578bcb8-wgcll\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "5ff578bcb8-wgcll",
            "placeholder": "<POD_SUFFIX>",
            "position": 63
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation geo -o yaml\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Retrieve geo deployment YAML to review configuration/env for authentication-related settings.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation geo -o yaml\")"
      },
      {
        "command": "submit(\"Yes\")",
        "type": "execute_command",
        "importance_score": 8,
        "description": "Submit anomaly detected decision to the orchestrator.",
        "sequence_number": 6,
        "original_command": "submit(\"Yes\")"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_loadgenerator_flood_homepage-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the namespace to identify unhealthy components and restarts (ad pod showing multiple restarts).",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/ad --tail=200\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Check current logs of the ad deployment for errors or startup issues.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/ad --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop pod/ad-<POD_SUFFIX> -<REPLICA_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Inspect previous container logs of the ad pod to review crash context.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop pod/ad-94bd576b5-28xm5 --previous --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-28xm5",
            "placeholder": "<POD_SUFFIX>",
            "position": 50
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 64
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/load<REPLICA_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Review load generator logs to confirm widespread connection errors impacting the homepage.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/load-generator --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-generator",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 54
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get svc -n astronomy-shop -o wide\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "List services and their ClusterIPs/ports to support mapping of failing connections.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl get svc -n astronomy-shop -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/frontend --tail=200\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Check frontend logs which show ECONNREFUSED to the ad service ClusterIP/port, indicating upstream ad issues.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/frontend --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc/ad -n astronomy-shop -o yaml\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Get ad service details to confirm ClusterIP and port match the connection refused errors seen by frontend.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl get svc/ad -n astronomy-shop -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n astronomy-shop ad -o yaml\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Verify ad service endpoints and backend pod mapping to ensure traffic targets the correct pod.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl get endpoints -n astronomy-shop ad -o yaml\")"
      },
      {
        "command": "exec_shell(\"kubectl describe deploy/ad -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Describe the ad deployment for configuration and availability status.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl describe deploy/ad -n astronomy-shop\")"
      },
      {
        "command": "exec_shell(\"kubectl describe pod -n astronomy-shop ad-<POD_SUFFIX>\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Describe the ad pod to confirm restarts and prior termination (exit code 137), supporting ad as the root cause.",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl describe pod -n astronomy-shop ad-94bd576b5-28xm5\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "94bd576b5-28xm5",
            "placeholder": "<POD_SUFFIX>",
            "position": 54
          }
        ]
      },
      {
        "command": "submit([\"ad\"])",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the identified faulty service (ad) as the root cause to resolve the test case.",
        "sequence_number": 11,
        "original_command": "submit([\"ad\"])"
      }
    ]
  },
  {
    "problem_id": "wrong_bin_usage-mitigation-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation -o jsonpath='{range .items[*]}{.metadata.name}{\\\"\\\\t\\\"}{.spec.template.spec.containers[0].command}{\\\"\\\\n\\\"}{end}'\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Verify all deployment container commands; confirms profile now runs 'profile'.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation -o jsonpath='{range .items[*]}{.metadata.name}{\\\"\\\\t\\\"}{.spec.template.spec.containers[0].command}{\\\"\\\\n\\\"}{end}'\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation -o jsonpath=\\'{range .items[*]}{.metadata.name}{\\\\\"\\\\\\\\t\\\\\"}{.spec.template.spec.containers[0].command}{\\\\\"\\\\\\\\n\\\\\"}{end}\\'\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Validate that the deployment commands have the expected values after the patch.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get deploy -n test-hotel-reservation -o jsonpath=\\'{range .items[*]}{.metadata.name}{\\\\\"\\\\\\\\t\\\\\"}{.spec.template.spec.containers[0].command}{\\\\\"\\\\\\\\n\\\\\"}{end}\\'\")"
      },
      {
        "command": "exec_shell(\"kubectl patch deployment profile -n test-hotel-reservation --type='json' -p='[{\\\"op\\\":\\\"replace\\\",\\\"path\\\":\\\"/spec/template/spec/containers/0/command\\\",\\\"value\\\":[\\\"profile\\\"]}]'\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Patch the profile deployment to run the correct binary ('profile') instead of 'geo'.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl patch deployment profile -n test-hotel-reservation --type='json' -p='[{\\\"op\\\":\\\"replace\\\",\\\"path\\\":\\\"/spec/template/spec/containers/0/command\\\",\\\"value\\\":[\\\"profile\\\"]}]'\")"
      },
      {
        "command": "exec_shell(\"kubectl patch deployment profile -n test-hotel-reservation --type=\\'json\\' -p=\\'[{\\\\\"op\\\\\":\\\\\"replace\\\\\",\\\\\"path\\\\\":\\\\\"/spec/template/spec/containers/0/command\\\\\",\\\\\"value\\\\\":[\\\\\"profile\\\\\"]}]\\'\")",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Patch the profile deployment to set the correct container command to 'profile', fixing the misconfiguration.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl patch deployment profile -n test-hotel-reservation --type=\\'json\\' -p=\\'[{\\\\\"op\\\\\":\\\\\"replace\\\\\",\\\\\"path\\\\\":\\\\\"/spec/template/spec/containers/0/command\\\\\",\\\\\"value\\\\\":[\\\\\"profile\\\\\"]}]\\'\")"
      },
      {
        "command": "exec_shell(\"kubectl describe deploy/search -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Describe search deployment to compare configuration and confirm it is correct.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl describe deploy/search -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl describe deploy/profile -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Describe profile deployment; confirms container command is incorrectly set to 'geo'.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl describe deploy/profile -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/profile --tail=200\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "Review profile service logs; reveals it is running the wrong binary (geo), indicating misconfiguration.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/profile --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/search --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Review search service logs to confirm it is healthy and registered in Consul.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/search --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation pod/consul-<POD_SUFFIX> --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Check Consul agent logs to rule out service discovery issues.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation pod/consul-78c8d79bb-mqpkv --tail=200\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "78c8d79bb-mqpkv",
            "placeholder": "<POD_SUFFIX>",
            "position": 62
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/frontend --tail=200\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Inspect frontend logs to surface user-facing errors (e.g., SearchHandler GetProfiles failures).",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/frontend --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "List services to verify service endpoints and ports.",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl get svc -n test-hotel-reservation\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "List pods in the namespace to assess overall workload health and readiness.",
        "sequence_number": 12,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      }
    ]
  },
  {
    "problem_id": "scale_pod_zero_social_net-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List pods in the namespace to assess running workloads and notice absence of user-service pods.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "List services in the namespace to verify service objects exist; auxiliary validation.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n test-social-network -o wide\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "List deployments with replica and availability details; confirms user-service deployment is scaled to zero replicas.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get deploy -n test-social-network -o wide\")"
      }
    ]
  },
  {
    "problem_id": "scale_pod_zero_social_net-localization-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl get pods -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "List pods in the namespace to identify missing or non-running components.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl get pods -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-social-network -o wide\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "List services to verify the presence and configuration of service endpoints like user-service.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get svc -n test-social-network -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get deploy -n test-social-network -o wide\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "List deployments to check replica and availability status; reveals user-service has 0/0 replicas.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl get deploy -n test-social-network -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl describe deploy user-service -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Describe the user-service deployment to confirm desired replicas are 0 and view scaling events.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl describe deploy user-service -n test-social-network\")"
      },
      {
        "command": "exec_shell(\"kubectl get hpa -n test-social-network\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Check for HorizontalPodAutoscaler resources to rule out autoscaling as the cause.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl get hpa -n test-social-network\")"
      },
      {
        "command": "submit([\"user-service\"])",
        "type": "execute_command",
        "importance_score": 10,
        "description": "Submit the identified faulty component (user-service) as the root cause.",
        "sequence_number": 6,
        "original_command": "submit([\"user-service\"])"
      }
    ]
  },
  {
    "problem_id": "astronomy_shop_payment_service_failure-localization-1",
    "key_commands": [
      {
        "command": "submit([\"fraud<REPLICA_SUFFIX>\"])",
        "type": "execute_command",
        "importance_score": 9,
        "description": "Submit the identified faulty component(s) to the orchestrator for evaluation.",
        "sequence_number": 1,
        "original_command": "submit([\"fraud-detection\"])",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 14
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop -o wide\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Re-check pods with node and IP info; surfaces CrashLoopBackOff status changes (e.g., fraud-detection).",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/frontend --since=2m\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Tail recent frontend logs for up-to-the-minute error context.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/frontend --since=2m\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/fraud<REPLICA_SUFFIX> -c<REPLICA_SUF<REPLICA_SUFFIX>n --previous\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Retrieve previous container logs to verify recent crashes/restarts of fraud-detection.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/fraud-detection -c fraud-detection --previous\")",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 55
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 74
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-previous",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 86
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/fraud<REPLICA_SUFFIX> --since=10m\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Fetch default fraud-detection logs; preliminary view before targeting the app container.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/fraud-detection --since=10m\")",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 55
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/fraud<REPLICA_SUFFIX> -c<REPLICA_SUFFIX>ection --since=10m\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Check fraud-detection service application container logs for issues.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/fraud-detection -c fraud-detection --since=10m\")",
        "placeholders_used": [
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 55
          },
          {
            "type": "k8s_replicaset_suffix",
            "original": "-detection",
            "placeholder": "<REPLICA_SUFFIX>",
            "position": 74
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/<POD_SUFFIX> --since=10m\")",
        "type": "probe_command",
        "importance_score": 2,
        "description": "Inspect frontend-proxy (Envoy) logs for proxy-level anomalies.",
        "sequence_number": 7,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/frontend-proxy --since=10m\")",
        "placeholders_used": [
          {
            "type": "k8s_pod_suffix",
            "original": "frontend-proxy",
            "placeholder": "<POD_SUFFIX>",
            "position": 50
          }
        ]
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/ad --since=10m\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Check ad service logs; used as a reference for non-failing service behavior.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/ad --since=10m\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/payment --since=10m\")",
        "type": "probe_command",
        "importance_score": 8,
        "description": "Review payment service logs to determine if payment is healthy or failing.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/payment --since=10m\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/checkout --since=10m\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Fetch default checkout logs to prompt specifying the correct container.",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/checkout --since=10m\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/checkout -c checkout --since=10m\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Inspect checkout service logs (app container) to validate downstream config and connectivity, including payment.",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/checkout -c checkout --since=10m\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/cart --since=10m\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Fetch default cart pod logs (before specifying container) for initial signal.",
        "sequence_number": 12,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/cart --since=10m\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/cart -c cart --since=10m\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Check cart service application container logs to confirm it is serving requests.",
        "sequence_number": 13,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/cart -c cart --since=10m\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/frontend --since=10m\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Inspect frontend logs; reveals ECONNREFUSED to specific service ClusterIPs (e.g., cart).",
        "sequence_number": 14,
        "original_command": "exec_shell(\"kubectl logs -n astronomy-shop deploy/frontend --since=10m\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n astronomy-shop cart ad -o wide\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "Check endpoints for cart and ad services to verify backing pod IPs and readiness.",
        "sequence_number": 15,
        "original_command": "exec_shell(\"kubectl get endpoints -n astronomy-shop cart ad -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n astronomy-shop -o wide\")",
        "type": "probe_command",
        "importance_score": 7,
        "description": "List services with ClusterIP and ports to correlate frontend errors with service addresses.",
        "sequence_number": 16,
        "original_command": "exec_shell(\"kubectl get svc -n astronomy-shop -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n astronomy-shop\")",
        "type": "probe_command",
        "importance_score": 6,
        "description": "List all pods in the astronomy-shop namespace to assess overall service health and statuses.",
        "sequence_number": 17,
        "original_command": "exec_shell(\"kubectl get pods -n astronomy-shop\")"
      }
    ]
  },
  {
    "problem_id": "network_loss_hotel_res-detection-1",
    "key_commands": [
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/geo --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Fetches recent logs from the geo service for anomalies.",
        "sequence_number": 1,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/geo --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/rate --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Fetches recent logs from the rate service for anomalies.",
        "sequence_number": 2,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/rate --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/reservation --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Fetches recent logs from the reservation service for anomalies.",
        "sequence_number": 3,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/reservation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/user --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Fetches recent logs from the user service for anomalies.",
        "sequence_number": 4,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/user --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/recommendation --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Fetches recent logs from the recommendation service for anomalies.",
        "sequence_number": 5,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/recommendation --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/profile --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Fetches recent logs from the profile service for anomalies.",
        "sequence_number": 6,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/profile --tail=200\")"
      },
      {
        "command": "submit(\"Yes\")",
        "type": "execute_command",
        "importance_score": 8,
        "description": "Submit the anomaly detection result indicating an issue was found.",
        "sequence_number": 7,
        "original_command": "submit(\"Yes\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/search --tail=200\")",
        "type": "probe_command",
        "importance_score": 3,
        "description": "Fetches recent logs from the search service for anomalies.",
        "sequence_number": 8,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/search --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get networkchaos -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 10,
        "description": "Directly confirm active Chaos Mesh experiments; shows a 'loss' NetworkChaos with 200s duration.",
        "sequence_number": 9,
        "original_command": "exec_shell(\"kubectl get networkchaos -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/consul --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Fetches recent logs from the Consul deployment to verify service discovery health.",
        "sequence_number": 10,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/consul --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get events -n test-hotel-reservation --sort-by=.metadata.creationTimestamp\")",
        "type": "probe_command",
        "importance_score": 9,
        "description": "Review chronological Kubernetes events to detect injected faults; reveals NetworkChaos applied to the user pod.",
        "sequence_number": 11,
        "original_command": "exec_shell(\"kubectl get events -n test-hotel-reservation --sort-by=.metadata.creationTimestamp\")"
      },
      {
        "command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/frontend --tail=200\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "Fetches recent logs from the frontend deployment for error signals.",
        "sequence_number": 12,
        "original_command": "exec_shell(\"kubectl logs -n test-hotel-reservation deploy/frontend --tail=200\")"
      },
      {
        "command": "exec_shell(\"kubectl get endpoints -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "Inspect service endpoints to confirm backing pod IPs and ports are correctly registered.",
        "sequence_number": 13,
        "original_command": "exec_shell(\"kubectl get endpoints -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get svc -n test-hotel-reservation -o wide\")",
        "type": "probe_command",
        "importance_score": 4,
        "description": "List services and cluster IPs/ports to verify service exposure and networking configuration.",
        "sequence_number": 14,
        "original_command": "exec_shell(\"kubectl get svc -n test-hotel-reservation -o wide\")"
      },
      {
        "command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")",
        "type": "probe_command",
        "importance_score": 5,
        "description": "List all pods in the hotel reservation namespace to establish baseline health and readiness.",
        "sequence_number": 15,
        "original_command": "exec_shell(\"kubectl get pods -n test-hotel-reservation\")"
      }
    ]
  }
]